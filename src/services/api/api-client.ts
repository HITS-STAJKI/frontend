import * as Types from './api-client.types';
export * from './api-client.types';

//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import type { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export * as UserClient from './api-client/UserClient';

export * as UserQuery from './api-client/UserQuery';



export * as StudentClient from './api-client/StudentClient';

export * as StudentQuery from './api-client/StudentQuery';



export * as StackClient from './api-client/StackClient';

export * as StackQuery from './api-client/StackQuery';



export * as PracticeClient from './api-client/PracticeClient';

export * as PracticeQuery from './api-client/PracticeQuery';



export * as CompanyPartnersClient from './api-client/CompanyPartnersClient';

export * as CompanyPartnersQuery from './api-client/CompanyPartnersQuery';



export * as Programming_languageClient from './api-client/Programming_languageClient';

export * as Programming_languageQuery from './api-client/Programming_languageQuery';



export * as InterviewsClient from './api-client/InterviewsClient';

export * as InterviewsQuery from './api-client/InterviewsQuery';



export * as CuratorClient from './api-client/CuratorClient';

export * as CuratorQuery from './api-client/CuratorQuery';



export * as Messages_in_chatClient from './api-client/Messages_in_chatClient';

export * as Messages_in_chatQuery from './api-client/Messages_in_chatQuery';



export * as TeacherClient from './api-client/TeacherClient';

export * as TeacherQuery from './api-client/TeacherQuery';



export * as Practice_reportsClient from './api-client/Practice_reportsClient';

export * as Practice_reportsQuery from './api-client/Practice_reportsQuery';



export * as GroupClient from './api-client/GroupClient';

export * as GroupQuery from './api-client/GroupQuery';



export * as GraduationClient from './api-client/GraduationClient';

export * as GraduationQuery from './api-client/GraduationQuery';



export * as FilesClient from './api-client/FilesClient';

export * as FilesQuery from './api-client/FilesQuery';



export * as Educational_program_leadClient from './api-client/Educational_program_leadClient';

export * as Educational_program_leadQuery from './api-client/Educational_program_leadQuery';



export * as DeanClient from './api-client/DeanClient';

export * as DeanQuery from './api-client/DeanQuery';



export * as ChatControllerClient from './api-client/ChatControllerClient';

export * as ChatControllerQuery from './api-client/ChatControllerQuery';



export * as RoleClient from './api-client/RoleClient';

export * as RoleQuery from './api-client/RoleQuery';





import { addResultTypeFactory } from './api-client/helpers';
export { setBaseUrl, getBaseUrl } from './api-client/helpers';
export { setAxiosFactory, getAxios } from './api-client/helpers';


//-----PersistorHydrator.File-----
import type { PersistedClient } from '@tanstack/react-query-persist-client';
import type { DehydratedState, QueryKey } from '@tanstack/react-query'
import { getResultTypeFactory } from './api-client/helpers';

/*
 * If you have Dates in QueryKeys (i.e. in request parameters), you need to deserialize them to Dates correctly
 * (otherwise they are deserialized as strings by default, and your queries are broken).
 */
export function deserializeDate(str: unknown) {
  if (!str || typeof str !== 'string') return str;
  if (!/^\d\d\d\d\-\d\d\-\d\d/.test(str)) return str;
  
  const date = new Date(str);
  const isDate = date instanceof Date && !isNaN(date as any);
  
  return isDate ? date : str;
}

export function deserializeDatesInQueryKeys(queryKey: QueryKey) {
  return queryKey
    // We need to replace `null` with `undefined` in query key, because
    // `undefined` is serialized as `null`.
    // And most probably if we have `null` in QueryKey it actually means `undefined`.
    // We can't keep nulls, because they have a different meaning, and e.g. boolean parameters are not allowed to be null.
    .map(x => (x === null ? undefined : x))
    .map(x => deserializeDate(x));
}

export function deserializeClassesInQueryData(queryKey: QueryKey, data: any) {
  if (!data) {
    return data;
  } else if (typeof data !== 'object') {
    return data;
  } else if ('pages' in data && 'pageParams' in data && Array.isArray(data.pages) && Array.isArray(data.pageParams)) {
    // infinite query
    data.pages = data.pages.map((page:any) => deserializeClassesInQueryData(queryKey, page));
  } else if (Array.isArray(data)) {
    return data.map(elem => constructDtoClass(queryKey, elem));
  } else {
    return constructDtoClass(queryKey, data);
  }
}

/*
 * Pass this function as `deserialize` option to createSyncStoragePersister/createAsyncStoragePersister
 * to correctly deserialize your DTOs (including Dates)
 */
export function persisterDeserialize(cache: string): PersistedClient {
  const client: PersistedClient = JSON.parse(cache);
  client.clientState.queries.forEach((query) => {
    query.state.data = deserializeClassesInQueryData(query.queryKey, query.state.data);
    query.queryKey = deserializeDatesInQueryKeys(query.queryKey);
  });

  return client;
}

export function constructDtoClass(queryKey: QueryKey, data: any): unknown {
  const resultTypeKey = getResultTypeClassKey(queryKey);
  const constructorFunction = getResultTypeFactory(resultTypeKey);

  if (!data || !constructorFunction)
    return data;

  return constructorFunction(data);
}

export function getResultTypeClassKey(queryKey: QueryKey): string {
  if (!Array.isArray(queryKey)) {
    return queryKey as unknown as string;
  }
  if (queryKey.length >= 2) {
    // We concatenate first and second elements, because they uniquely identify the query.
    // All other QueryKey elements are query parameters
    return `${queryKey[0]}___${queryKey[1]}`;
  }

  // We actually should never reach this point :)
  return queryKey.join('___');
}

export function initPersister() {
  
  addResultTypeFactory('UserClient___getCurrentUser', (data: any) => Types.initUserDetailsDto(data));
  addResultTypeFactory('UserClient___getUserById', (data: any) => Types.initUserDetailsDto(data));
  addResultTypeFactory('UserClient___getUserList', (data: any) => Types.initPagedListDtoUserDto(data));


  addResultTypeFactory('StudentClient___getAllStudents', (data: any) => Types.initPagedListDtoStudentDto(data));


  addResultTypeFactory('StackClient___getStackList', (data: any) => Types.initStackDto(data));


  addResultTypeFactory('PracticeClient___getCurrentStudentPractice', (data: any) => Types.initPracticeDto(data));
  addResultTypeFactory('PracticeClient___getMyPractice', (data: any) => Types.initPracticeDto(data));
  addResultTypeFactory('PracticeClient___getStudentPractices', (data: any) => Types.initPagedListDtoPracticeDto(data));
  addResultTypeFactory('PracticeClient___getPracticeRequests', (data: any) => Types.initPagedListDtoPracticeDto(data));
  addResultTypeFactory('PracticeClient___getAllPractices', (data: any) => Types.initPagedListDtoPracticeDto(data));


  addResultTypeFactory('CompanyPartnersClient___getPartnerInfo', (data: any) => Types.initCompanyPartnerDto(data));
  addResultTypeFactory('CompanyPartnersClient___getPartners', (data: any) => Types.initPagedListDtoShortCompanyPartnerDto(data));


  addResultTypeFactory('Programming_languageClient___getLanguageList', (data: any) => Types.initLanguageDto(data));


  addResultTypeFactory('InterviewsClient___getInterview', (data: any) => Types.initInterviewDto(data));
  addResultTypeFactory('InterviewsClient___getInterviewList', (data: any) => Types.initPagedListDtoInterviewDto(data));
  addResultTypeFactory('InterviewsClient___getInterviewList_1', (data: any) => Types.initPagedListDtoInterviewDto(data));


  addResultTypeFactory('CuratorClient___getAllCurators', (data: any) => Types.initPagedListDtoCuratorDto(data));


  addResultTypeFactory('Messages_in_chatClient___getMessagesList', (data: any) => Types.initPagedListDtoMessageDto(data));


  addResultTypeFactory('TeacherClient___getAllTeachers', (data: any) => Types.initPagedListDtoTeacherDto(data));


  addResultTypeFactory('Practice_reportsClient___getPracticeReport', (data: any) => Types.initReportDto(data));


  addResultTypeFactory('GroupClient___getGroups', (data: any) => Types.initPagedListDtoGroupDto(data));




  addResultTypeFactory('FilesClient___getFileMetadata', (data: any) => Types.initFileDto(data));
  addResultTypeFactory('FilesClient___getMyFiles', (data: any) => Types.initPagedListDtoFileDto(data));




  addResultTypeFactory('DeanClient___getAllDeans', (data: any) => Types.initPagedListDtoDeanDto(data));


  addResultTypeFactory('ChatControllerClient___getMyChatInfo', (data: any) => Types.initChatInfoDto(data));




}
//-----/PersistorHydrator.File----