//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../api-client.types';
import { useQuery, useMutation } from '@tanstack/react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from '@tanstack/react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import * as Client from './DeanClient'
export { Client };
import type { AxiosRequestConfig } from 'axios';

export type GetAllDeansDeanQueryParameters = {
  page?: number | undefined ;
  size?: number | undefined ;
  sort?: string[] | undefined ;
  fullName?: string | undefined ;
}

export function createDeanUrl(): string {
  let url_ = getBaseUrl() + "/api/v1/dean";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function createDeanMutationKey(): MutationKey {
  return trimArrayEnd([
      'DeanClient',
      'createDean',
    ]);
}

/**
 * Создание представителя деканата
 * @return OK
 */
export function useCreateDeanMutation<TContext>(options?: Omit<UseMutationOptions<Types.DeanDto, unknown, Types.DeanCreateDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.DeanDto, unknown, Types.DeanCreateDto, TContext> {
  const key = createDeanMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (body: Types.DeanCreateDto) => Client.createDean(body),
    mutationKey: key,
  });
}
  
export function getAllDeansUrl(page?: number | undefined, size?: number | undefined, sort?: string[] | undefined, fullName?: string | undefined): string {
  let url_ = getBaseUrl() + "/api/v1/dean/list?";
if (page === null)
    throw new Error("The parameter 'page' cannot be null.");
else if (page !== undefined)
    url_ += "page=" + encodeURIComponent("" + page) + "&";
if (size === null)
    throw new Error("The parameter 'size' cannot be null.");
else if (size !== undefined)
    url_ += "size=" + encodeURIComponent("" + size) + "&";
if (sort === null)
    throw new Error("The parameter 'sort' cannot be null.");
else if (sort !== undefined)
    sort && sort.forEach(item => { url_ += "sort=" + encodeURIComponent("" + item) + "&"; });
if (fullName === null)
    throw new Error("The parameter 'fullName' cannot be null.");
else if (fullName !== undefined)
    url_ += "fullName=" + encodeURIComponent("" + fullName) + "&";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getAllDeansDefaultOptions: Omit<UseQueryOptions<Types.PagedListDtoDeanDto, unknown, Types.PagedListDtoDeanDto>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<Types.PagedListDtoDeanDto, unknown, Types.PagedListDtoDeanDto>, 'queryFn'>> = {
};
export function getGetAllDeansDefaultOptions() {
  return getAllDeansDefaultOptions;
};
export function setGetAllDeansDefaultOptions(options: typeof getAllDeansDefaultOptions) {
  getAllDeansDefaultOptions = options;
}

export function getAllDeansQueryKey(dto: GetAllDeansDeanQueryParameters): QueryKey;
export function getAllDeansQueryKey(page?: number | undefined, size?: number | undefined, sort?: string[] | undefined, fullName?: string | undefined): QueryKey;
export function getAllDeansQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { page, size, sort, fullName,  } = params[0] as GetAllDeansDeanQueryParameters;

    return trimArrayEnd([
        'DeanClient',
        'getAllDeans',
        page as any,
        size as any,
        sort as any,
        fullName as any,
      ]);
  } else {
    return trimArrayEnd([
        'DeanClient',
        'getAllDeans',
        ...params
      ]);
  }
}
export function __getAllDeans(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.getAllDeans(
      context.queryKey[2] as number | undefined,       context.queryKey[3] as number | undefined,       context.queryKey[4] as string[] | undefined,       context.queryKey[5] as string | undefined,axiosConfig    );
}

export function useGetAllDeansQuery<TSelectData = Types.PagedListDtoDeanDto, TError = unknown>(dto: GetAllDeansDeanQueryParameters, options?: Omit<UseQueryOptions<Types.PagedListDtoDeanDto, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
/**
 * Получение всех представителей деканата
 * @param page (optional) Zero-based page index (0..N)
 * @param size (optional) The size of the page to be returned
 * @param sort (optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
 * @param fullName (optional) 
 * @return OK
 */
export function useGetAllDeansQuery<TSelectData = Types.PagedListDtoDeanDto, TError = unknown>(page?: number | undefined, size?: number | undefined, sort?: string[] | undefined, fullName?: string | undefined, options?: Omit<UseQueryOptions<Types.PagedListDtoDeanDto, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useGetAllDeansQuery<TSelectData = Types.PagedListDtoDeanDto, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.PagedListDtoDeanDto, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  let page: any = undefined;
  let size: any = undefined;
  let sort: any = undefined;
  let fullName: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ page, size, sort, fullName,  } = params[0] as GetAllDeansDeanQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [page, size, sort, fullName, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.PagedListDtoDeanDto, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __getAllDeans(context, axiosConfig) : __getAllDeans,
    queryKey: getAllDeansQueryKey(page, size, sort, fullName),
    ...getAllDeansDefaultOptions as unknown as Omit<UseQueryOptions<Types.PagedListDtoDeanDto, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Получение всех представителей деканата
 * @param page (optional) Zero-based page index (0..N)
 * @param size (optional) The size of the page to be returned
 * @param sort (optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
 * @param fullName (optional) 
 * @return OK
 */
export function setGetAllDeansData(queryClient: QueryClient, updater: (data: Types.PagedListDtoDeanDto | undefined) => Types.PagedListDtoDeanDto, page?: number | undefined, size?: number | undefined, sort?: string[] | undefined, fullName?: string | undefined) {
  queryClient.setQueryData(getAllDeansQueryKey(page, size, sort, fullName),
    updater
  );
}

/**
 * Получение всех представителей деканата
 * @param page (optional) Zero-based page index (0..N)
 * @param size (optional) The size of the page to be returned
 * @param sort (optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
 * @param fullName (optional) 
 * @return OK
 */
export function setGetAllDeansDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.PagedListDtoDeanDto | undefined) => Types.PagedListDtoDeanDto) {
  queryClient.setQueryData(queryKey, updater);
}