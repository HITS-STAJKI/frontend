//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
//@ts-nocheck
import * as Types from '../api-client.types';
import { useQuery, useMutation } from '@tanstack/react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from '@tanstack/react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import * as Client from './UserClient'
export { Client };
import type { AxiosRequestConfig } from 'axios';


export type UpdateUserEmailUserQueryParameters = {
  userId: string;
}


export type GetUserByIdUserQueryParameters = {
  id: string;
}

export type GetUserListUserQueryParameters = {
  fullName?: string | undefined;
  userRole?: Types.UserRole | undefined;
  page?: number | undefined;
  size?: number | undefined;
  sort?: string[] | undefined;
}

export function getCurrentUserUrl(): string {
  let url_ = getBaseUrl() + "/api/v1/user";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getCurrentUserDefaultOptions: Omit<UseQueryOptions<Types.UserDetailsDto, unknown, Types.UserDetailsDto>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<Types.UserDetailsDto, unknown, Types.UserDetailsDto>, 'queryFn'>> = {
};
export function getGetCurrentUserDefaultOptions() {
  return getCurrentUserDefaultOptions;
};
export function setGetCurrentUserDefaultOptions(options: typeof getCurrentUserDefaultOptions) {
  getCurrentUserDefaultOptions = options;
}

export function getCurrentUserQueryKey(): QueryKey;
export function getCurrentUserQueryKey(...params: any[]): QueryKey {
  return trimArrayEnd([
    'UserClient',
    'getCurrentUser',
  ]);
}
export function __getCurrentUser(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.getCurrentUser(
    axiosConfig);
}

/**
 * Получение информации текущего пользователя
 * @return OK
 */
export function useGetCurrentUserQuery<TSelectData = Types.UserDetailsDto, TError = unknown>(options?: Omit<UseQueryOptions<Types.UserDetailsDto, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useGetCurrentUserQuery<TSelectData = Types.UserDetailsDto, TError = unknown>(...params: any[]): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.UserDetailsDto, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig | undefined = undefined;


  options = params[0] as any;
  axiosConfig = params[1] as any;

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.UserDetailsDto, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __getCurrentUser(context, axiosConfig) : __getCurrentUser,
    queryKey: getCurrentUserQueryKey(),
    ...getCurrentUserDefaultOptions as unknown as Omit<UseQueryOptions<Types.UserDetailsDto, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Получение информации текущего пользователя
 * @return OK
 */
export function setGetCurrentUserData(queryClient: QueryClient, updater: (data: Types.UserDetailsDto | undefined) => Types.UserDetailsDto,) {
  queryClient.setQueryData(getCurrentUserQueryKey(),
    updater
  );
}

/**
 * Получение информации текущего пользователя
 * @return OK
 */
export function setGetCurrentUserDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.UserDetailsDto | undefined) => Types.UserDetailsDto) {
  queryClient.setQueryData(queryKey, updater);
}

export function updateCurrentUserUrl(): string {
  let url_ = getBaseUrl() + "/api/v1/user";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function updateCurrentUserMutationKey(): MutationKey {
  return trimArrayEnd([
    'UserClient',
    'updateCurrentUser',
  ]);
}

/**
 * Изменение информации текущего пользователя
 * @return OK
 */
export function useUpdateCurrentUserMutation<TContext>(options?: Omit<UseMutationOptions<Types.UserShortDto, unknown, Types.UserEditDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.UserShortDto, unknown, Types.UserEditDto, TContext> {
  const key = updateCurrentUserMutationKey();

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useMutation({
    ...options,
    mutationFn: (body: Types.UserEditDto) => Client.updateCurrentUser(body),
    mutationKey: key,
  });
}

export function updateUserEmailUrl(userId: string): string {
  let url_ = getBaseUrl() + "/api/v1/user/{userId}";
  if (userId === undefined || userId === null)
    throw new Error("The parameter 'userId' must be defined.");
  url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function updateUserEmailMutationKey(userId: string): MutationKey {
  return trimArrayEnd([
    'UserClient',
    'updateUserEmail',
    userId as any,
  ]);
}

/**
 * Изменение электронной почты указанного пользователя
 * @return OK
 */
export function useUpdateUserEmailMutation<TContext>(userId: string, options?: Omit<UseMutationOptions<Types.UserShortDto, unknown, Types.UserEmailEditDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.UserShortDto, unknown, Types.UserEmailEditDto, TContext> {
  const key = updateUserEmailMutationKey(userId);

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useMutation({
    ...options,
    mutationFn: (body: Types.UserEmailEditDto) => Client.updateUserEmail(userId, body),
    mutationKey: key,
  });
}

type UpdateUserEmail__MutationParameters = UpdateUserEmailUserQueryParameters & {
  body: Types.UserEmailEditDto;
}

/**
 * Изменение электронной почты указанного пользователя
 * @return OK
 */
export function useUpdateUserEmailMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<Types.UserShortDto, unknown, UpdateUserEmail__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: UpdateUserEmailUserQueryParameters }): UseMutationResult<Types.UserShortDto, unknown, UpdateUserEmail__MutationParameters, TContext> {
  const key = updateUserEmailMutationKey(options?.parameters?.userId!);

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useMutation({
    ...options,
    mutationFn: (data: UpdateUserEmail__MutationParameters) => Client.updateUserEmail(data.userId ?? options?.parameters?.userId!, data.body),
    mutationKey: key,
  });
}

export function updateCurrentUserPasswordUrl(): string {
  let url_ = getBaseUrl() + "/api/v1/user/password";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function updateCurrentUserPasswordMutationKey(): MutationKey {
  return trimArrayEnd([
    'UserClient',
    'updateCurrentUserPassword',
  ]);
}

/**
 * Изменение пароля текущего пользователя
 * @return OK
 */
export function useUpdateCurrentUserPasswordMutation<TContext>(options?: Omit<UseMutationOptions<Types.Response, unknown, Types.PasswordEditDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.Response, unknown, Types.PasswordEditDto, TContext> {
  const key = updateCurrentUserPasswordMutationKey();

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useMutation({
    ...options,
    mutationFn: (body: Types.PasswordEditDto) => Client.updateCurrentUserPassword(body),
    mutationKey: key,
  });
}

export function registerUrl(): string {
  let url_ = getBaseUrl() + "/api/v1/user/register";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function registerMutationKey(): MutationKey {
  return trimArrayEnd([
    'UserClient',
    'register',
  ]);
}

/**
 * Регистрация
 * @return OK
 */
export function useRegisterMutation<TContext>(options?: Omit<UseMutationOptions<Types.TokenDto, unknown, Types.RegistrationRequestDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.TokenDto, unknown, Types.RegistrationRequestDto, TContext> {
  const key = registerMutationKey();

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useMutation({
    ...options,
    mutationFn: (body: Types.RegistrationRequestDto) => Client.register(body),
    mutationKey: key,
  });
}

export function loginUrl(): string {
  let url_ = getBaseUrl() + "/api/v1/user/login";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function loginMutationKey(): MutationKey {
  return trimArrayEnd([
    'UserClient',
    'login',
  ]);
}

/**
 * Вход в аккаунт
 * @return OK
 */
export function useLoginMutation<TContext>(options?: Omit<UseMutationOptions<Types.TokenDto, unknown, Types.LoginCredentialsDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.TokenDto, unknown, Types.LoginCredentialsDto, TContext> {
  const key = loginMutationKey();

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useMutation({
    ...options,
    mutationFn: (body: Types.LoginCredentialsDto) => Client.login(body),
    mutationKey: key,
  });
}

export function getUserByIdUrl(id: string): string {
  let url_ = getBaseUrl() + "/api/v1/user/{id}";
  if (id === undefined || id === null)
    throw new Error("The parameter 'id' must be defined.");
  url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getUserByIdDefaultOptions: Omit<UseQueryOptions<Types.UserDetailsDto, unknown, Types.UserDetailsDto>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<Types.UserDetailsDto, unknown, Types.UserDetailsDto>, 'queryFn'>> = {
};
export function getGetUserByIdDefaultOptions() {
  return getUserByIdDefaultOptions;
};
export function setGetUserByIdDefaultOptions(options: typeof getUserByIdDefaultOptions) {
  getUserByIdDefaultOptions = options;
}

export function getUserByIdQueryKey(id: string): QueryKey;
export function getUserByIdQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { id, } = params[0] as GetUserByIdUserQueryParameters;

    return trimArrayEnd([
      'UserClient',
      'getUserById',
      id as any,
    ]);
  } else {
    return trimArrayEnd([
      'UserClient',
      'getUserById',
      ...params
    ]);
  }
}
export function __getUserById(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.getUserById(
    context.queryKey[2] as string, axiosConfig);
}

export function useGetUserByIdQuery<TSelectData = Types.UserDetailsDto, TError = unknown>(dto: GetUserByIdUserQueryParameters, options?: Omit<UseQueryOptions<Types.UserDetailsDto, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
/**
 * Получение информации пользователя
 * @return OK
 */
export function useGetUserByIdQuery<TSelectData = Types.UserDetailsDto, TError = unknown>(id: string, options?: Omit<UseQueryOptions<Types.UserDetailsDto, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useGetUserByIdQuery<TSelectData = Types.UserDetailsDto, TError = unknown>(...params: any[]): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.UserDetailsDto, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig | undefined = undefined;
  let id: any = undefined;

  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ id, } = params[0] as GetUserByIdUserQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [id, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.UserDetailsDto, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __getUserById(context, axiosConfig) : __getUserById,
    queryKey: getUserByIdQueryKey(id),
    ...getUserByIdDefaultOptions as unknown as Omit<UseQueryOptions<Types.UserDetailsDto, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Получение информации пользователя
 * @return OK
 */
export function setGetUserByIdData(queryClient: QueryClient, updater: (data: Types.UserDetailsDto | undefined) => Types.UserDetailsDto, id: string) {
  queryClient.setQueryData(getUserByIdQueryKey(id),
    updater
  );
}

/**
 * Получение информации пользователя
 * @return OK
 */
export function setGetUserByIdDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.UserDetailsDto | undefined) => Types.UserDetailsDto) {
  queryClient.setQueryData(queryKey, updater);
}

export function getUserListUrl(fullName?: string | undefined, userRole?: Types.UserRole | undefined, page?: number | undefined, size?: number | undefined, sort?: string[] | undefined): string {
  let url_ = getBaseUrl() + "/api/v1/user/list?";
  if (fullName === null)
    throw new Error("The parameter 'fullName' cannot be null.");
  else if (fullName !== undefined)
    url_ += "fullName=" + encodeURIComponent("" + fullName) + "&";
  if (userRole === null)
    throw new Error("The parameter 'userRole' cannot be null.");
  else if (userRole !== undefined)
    url_ += "userRole=" + encodeURIComponent("" + userRole) + "&";
  if (page === null)
    throw new Error("The parameter 'page' cannot be null.");
  else if (page !== undefined)
    url_ += "page=" + encodeURIComponent("" + page) + "&";
  if (size === null)
    throw new Error("The parameter 'size' cannot be null.");
  else if (size !== undefined)
    url_ += "size=" + encodeURIComponent("" + size) + "&";
  if (sort === null)
    throw new Error("The parameter 'sort' cannot be null.");
  else if (sort !== undefined)
    sort && sort.forEach(item => { url_ += "sort=" + encodeURIComponent("" + item) + "&"; });
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getUserListDefaultOptions: Omit<UseQueryOptions<Types.PagedListDtoUserDto, unknown, Types.PagedListDtoUserDto>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<Types.PagedListDtoUserDto, unknown, Types.PagedListDtoUserDto>, 'queryFn'>> = {
};
export function getGetUserListDefaultOptions() {
  return getUserListDefaultOptions;
};
export function setGetUserListDefaultOptions(options: typeof getUserListDefaultOptions) {
  getUserListDefaultOptions = options;
}

export function getUserListQueryKey(dto: GetUserListUserQueryParameters): QueryKey;
export function getUserListQueryKey(fullName?: string | undefined, userRole?: Types.UserRole | undefined, page?: number | undefined, size?: number | undefined, sort?: string[] | undefined): QueryKey;
export function getUserListQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { fullName, userRole, page, size, sort, } = params[0] as GetUserListUserQueryParameters;

    return trimArrayEnd([
      'UserClient',
      'getUserList',
      fullName as any,
      userRole as any,
      page as any,
      size as any,
      sort as any,
    ]);
  } else {
    return trimArrayEnd([
      'UserClient',
      'getUserList',
      ...params
    ]);
  }
}
export function __getUserList(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.getUserList(
    context.queryKey[2] as string | undefined, context.queryKey[3] as Types.UserRole | undefined, context.queryKey[4] as number | undefined, context.queryKey[5] as number | undefined, context.queryKey[6] as string[] | undefined, axiosConfig);
}

export function useGetUserListQuery<TSelectData = Types.PagedListDtoUserDto, TError = unknown>(dto: GetUserListUserQueryParameters, options?: Omit<UseQueryOptions<Types.PagedListDtoUserDto, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
/**
 * Получение списка пользователей
 * @param fullName (optional) ФИО пользователя (разрешается частичное совпадение)
 * @param userRole (optional) Роль пользователя
 * @param page (optional) Zero-based page index (0..N)
 * @param size (optional) The size of the page to be returned
 * @param sort (optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
 * @return OK
 */
export function useGetUserListQuery<TSelectData = Types.PagedListDtoUserDto, TError = unknown>(fullName?: string | undefined, userRole?: Types.UserRole | undefined, page?: number | undefined, size?: number | undefined, sort?: string[] | undefined, options?: Omit<UseQueryOptions<Types.PagedListDtoUserDto, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useGetUserListQuery<TSelectData = Types.PagedListDtoUserDto, TError = unknown>(...params: any[]): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.PagedListDtoUserDto, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig | undefined = undefined;
  let fullName: any = undefined;
  let userRole: any = undefined;
  let page: any = undefined;
  let size: any = undefined;
  let sort: any = undefined;

  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ fullName, userRole, page, size, sort, } = params[0] as GetUserListUserQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [fullName, userRole, page, size, sort, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.PagedListDtoUserDto, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __getUserList(context, axiosConfig) : __getUserList,
    queryKey: getUserListQueryKey(fullName, userRole, page, size, sort),
    ...getUserListDefaultOptions as unknown as Omit<UseQueryOptions<Types.PagedListDtoUserDto, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Получение списка пользователей
 * @param fullName (optional) ФИО пользователя (разрешается частичное совпадение)
 * @param userRole (optional) Роль пользователя
 * @param page (optional) Zero-based page index (0..N)
 * @param size (optional) The size of the page to be returned
 * @param sort (optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
 * @return OK
 */
export function setGetUserListData(queryClient: QueryClient, updater: (data: Types.PagedListDtoUserDto | undefined) => Types.PagedListDtoUserDto, fullName?: string | undefined, userRole?: Types.UserRole | undefined, page?: number | undefined, size?: number | undefined, sort?: string[] | undefined) {
  queryClient.setQueryData(getUserListQueryKey(fullName, userRole, page, size, sort),
    updater
  );
}

/**
 * Получение списка пользователей
 * @param fullName (optional) ФИО пользователя (разрешается частичное совпадение)
 * @param userRole (optional) Роль пользователя
 * @param page (optional) Zero-based page index (0..N)
 * @param size (optional) The size of the page to be returned
 * @param sort (optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
 * @return OK
 */
export function setGetUserListDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.PagedListDtoUserDto | undefined) => Types.PagedListDtoUserDto) {
  queryClient.setQueryData(queryKey, updater);
}