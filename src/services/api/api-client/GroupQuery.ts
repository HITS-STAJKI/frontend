//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
//@ts-nocheck
import * as Types from '../api-client.types';
import { useQuery, useMutation } from '@tanstack/react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from '@tanstack/react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import * as Client from './GroupClient'
export { Client };
import type { AxiosRequestConfig } from 'axios';

export type GetGroupsGroupQueryParameters = {
  id?: string | undefined;
  number?: string | undefined;
  page?: number | undefined;
  size?: number | undefined;
  sort?: string[] | undefined;
}

export type DeleteGroupGroupQueryParameters = {
  id: string;
}

export type UpdateGroupGroupQueryParameters = {
  id: string;
}

export function getGroupsUrl(id?: string | undefined, number?: string | undefined, page?: number | undefined, size?: number | undefined, sort?: string[] | undefined): string {
  let url_ = getBaseUrl() + "/api/v1/groups?";
  if (id === null)
    throw new Error("The parameter 'id' cannot be null.");
  else if (id !== undefined)
    url_ += "id=" + encodeURIComponent("" + id) + "&";
  if (number === null)
    throw new Error("The parameter 'number' cannot be null.");
  else if (number !== undefined)
    url_ += "number=" + encodeURIComponent("" + number) + "&";
  if (page === null)
    throw new Error("The parameter 'page' cannot be null.");
  else if (page !== undefined)
    url_ += "page=" + encodeURIComponent("" + page) + "&";
  if (size === null)
    throw new Error("The parameter 'size' cannot be null.");
  else if (size !== undefined)
    url_ += "size=" + encodeURIComponent("" + size) + "&";
  if (sort === null)
    throw new Error("The parameter 'sort' cannot be null.");
  else if (sort !== undefined)
    sort && sort.forEach(item => { url_ += "sort=" + encodeURIComponent("" + item) + "&"; });
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getGroupsDefaultOptions: Omit<UseQueryOptions<Types.PagedListDtoGroupDto, unknown, Types.PagedListDtoGroupDto>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<Types.PagedListDtoGroupDto, unknown, Types.PagedListDtoGroupDto>, 'queryFn'>> = {
};
export function getGetGroupsDefaultOptions() {
  return getGroupsDefaultOptions;
};
export function setGetGroupsDefaultOptions(options: typeof getGroupsDefaultOptions) {
  getGroupsDefaultOptions = options;
}

export function getGroupsQueryKey(dto: GetGroupsGroupQueryParameters): QueryKey;
export function getGroupsQueryKey(id?: string | undefined, number?: string | undefined, page?: number | undefined, size?: number | undefined, sort?: string[] | undefined): QueryKey;
export function getGroupsQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { id, number, page, size, sort, } = params[0] as GetGroupsGroupQueryParameters;

    return trimArrayEnd([
      'GroupClient',
      'getGroups',
      id as any,
      number as any,
      page as any,
      size as any,
      sort as any,
    ]);
  } else {
    return trimArrayEnd([
      'GroupClient',
      'getGroups',
      ...params
    ]);
  }
}
export function __getGroups(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.getGroups(
    context.queryKey[2] as string | undefined, context.queryKey[3] as string | undefined, context.queryKey[4] as number | undefined, context.queryKey[5] as number | undefined, context.queryKey[6] as string[] | undefined, axiosConfig);
}

export function useGetGroupsQuery<TSelectData = Types.PagedListDtoGroupDto, TError = unknown>(dto: GetGroupsGroupQueryParameters, options?: Omit<UseQueryOptions<Types.PagedListDtoGroupDto, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
/**
 * Получение страницы групп по фильтру
 * @param id (optional) Идентификатор группы
 * @param number (optional) Номер группы (разрешается частичное совпадение)
 * @param page (optional) Zero-based page index (0..N)
 * @param size (optional) The size of the page to be returned
 * @param sort (optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
 * @return OK
 */
export function useGetGroupsQuery<TSelectData = Types.PagedListDtoGroupDto, TError = unknown>(id?: string | undefined, number?: string | undefined, page?: number | undefined, size?: number | undefined, sort?: string[] | undefined, options?: Omit<UseQueryOptions<Types.PagedListDtoGroupDto, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useGetGroupsQuery<TSelectData = Types.PagedListDtoGroupDto, TError = unknown>(...params: any[]): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.PagedListDtoGroupDto, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig | undefined = undefined;
  let id: any = undefined;
  let number: any = undefined;
  let page: any = undefined;
  let size: any = undefined;
  let sort: any = undefined;

  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ id, number, page, size, sort, } = params[0] as GetGroupsGroupQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [id, number, page, size, sort, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.PagedListDtoGroupDto, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __getGroups(context, axiosConfig) : __getGroups,
    queryKey: getGroupsQueryKey(id, number, page, size, sort),
    ...getGroupsDefaultOptions as unknown as Omit<UseQueryOptions<Types.PagedListDtoGroupDto, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Получение страницы групп по фильтру
 * @param id (optional) Идентификатор группы
 * @param number (optional) Номер группы (разрешается частичное совпадение)
 * @param page (optional) Zero-based page index (0..N)
 * @param size (optional) The size of the page to be returned
 * @param sort (optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
 * @return OK
 */
export function setGetGroupsData(queryClient: QueryClient, updater: (data: Types.PagedListDtoGroupDto | undefined) => Types.PagedListDtoGroupDto, id?: string | undefined, number?: string | undefined, page?: number | undefined, size?: number | undefined, sort?: string[] | undefined) {
  queryClient.setQueryData(getGroupsQueryKey(id, number, page, size, sort),
    updater
  );
}

/**
 * Получение страницы групп по фильтру
 * @param id (optional) Идентификатор группы
 * @param number (optional) Номер группы (разрешается частичное совпадение)
 * @param page (optional) Zero-based page index (0..N)
 * @param size (optional) The size of the page to be returned
 * @param sort (optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
 * @return OK
 */
export function setGetGroupsDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.PagedListDtoGroupDto | undefined) => Types.PagedListDtoGroupDto) {
  queryClient.setQueryData(queryKey, updater);
}

export function createGroupUrl(): string {
  let url_ = getBaseUrl() + "/api/v1/groups";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function createGroupMutationKey(): MutationKey {
  return trimArrayEnd([
    'GroupClient',
    'createGroup',
  ]);
}

/**
 * Создание группы
 * @return OK
 */
export function useCreateGroupMutation<TContext>(options?: Omit<UseMutationOptions<Types.GroupDto, unknown, Types.CreateGroupDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.GroupDto, unknown, Types.CreateGroupDto, TContext> {
  const key = createGroupMutationKey();

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useMutation({
    ...options,
    mutationFn: (body: Types.CreateGroupDto) => Client.createGroup(body),
    mutationKey: key,
  });
}

export function deleteGroupUrl(id: string): string {
  let url_ = getBaseUrl() + "/api/v1/groups/{id}";
  if (id === undefined || id === null)
    throw new Error("The parameter 'id' must be defined.");
  url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function deleteGroupMutationKey(id: string): MutationKey {
  return trimArrayEnd([
    'GroupClient',
    'deleteGroup',
    id as any,
  ]);
}

/**
 * Удаление группы
 * @param id id группы
 * @return OK
 */
export function useDeleteGroupMutation<TContext>(id: string, options?: Omit<UseMutationOptions<Types.Response, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.Response, unknown, void, TContext> {
  const key = deleteGroupMutationKey(id);

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useMutation({
    ...options,
    mutationFn: () => Client.deleteGroup(id),
    mutationKey: key,
  });
}

type DeleteGroup__MutationParameters = DeleteGroupGroupQueryParameters

/**
 * Удаление группы
 * @param id id группы
 * @return OK
 */
export function useDeleteGroupMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<Types.Response, unknown, DeleteGroup__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: DeleteGroupGroupQueryParameters }): UseMutationResult<Types.Response, unknown, DeleteGroup__MutationParameters, TContext> {
  const key = deleteGroupMutationKey(options?.parameters?.id!);

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useMutation({
    ...options,
    mutationFn: (data: DeleteGroup__MutationParameters) => Client.deleteGroup(data.id ?? options?.parameters?.id!),
    mutationKey: key,
  });
}

export function updateGroupUrl(id: string): string {
  let url_ = getBaseUrl() + "/api/v1/groups/{id}";
  if (id === undefined || id === null)
    throw new Error("The parameter 'id' must be defined.");
  url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function updateGroupMutationKey(id: string): MutationKey {
  return trimArrayEnd([
    'GroupClient',
    'updateGroup',
    id as any,
  ]);
}

/**
 * Обновление группы
 * @param id id группы
 * @return OK
 */
export function useUpdateGroupMutation<TContext>(id: string, options?: Omit<UseMutationOptions<Types.GroupDto, unknown, Types.UpdateGroupDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.GroupDto, unknown, Types.UpdateGroupDto, TContext> {
  const key = updateGroupMutationKey(id);

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useMutation({
    ...options,
    mutationFn: (body: Types.UpdateGroupDto) => Client.updateGroup(id, body),
    mutationKey: key,
  });
}

type UpdateGroup__MutationParameters = UpdateGroupGroupQueryParameters & {
  body: Types.UpdateGroupDto;
}

/**
 * Обновление группы
 * @param id id группы
 * @return OK
 */
export function useUpdateGroupMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<Types.GroupDto, unknown, UpdateGroup__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: UpdateGroupGroupQueryParameters }): UseMutationResult<Types.GroupDto, unknown, UpdateGroup__MutationParameters, TContext> {
  const key = updateGroupMutationKey(options?.parameters?.id!);

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useMutation({
    ...options,
    mutationFn: (data: UpdateGroup__MutationParameters) => Client.updateGroup(data.id ?? options?.parameters?.id!, data.body),
    mutationKey: key,
  });
}