//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../api-client.types';
import type { AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

import { throwException, isAxiosError } from '../api-client.types';
import { getAxios, getBaseUrl } from './helpers';

/**
 * Получить отбор
 * @param interviewId Id отбора
 * @return OK
 */
export function getInterview(interviewId: string, config?: AxiosRequestConfig | undefined): Promise<Types.InterviewDto> {
    let url_ = getBaseUrl() + "/api/v1/interview/{interviewId}";
    if (interviewId === undefined || interviewId === null)
      throw new Error("The parameter 'interviewId' must be defined.");
    url_ = url_.replace("{interviewId}", encodeURIComponent("" + interviewId));
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigGetInterview,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigGetInterview?.headers,
            "Accept": "*/*",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processGetInterview(_response);
    });
}

function processGetInterview(response: AxiosResponse): Promise<Types.InterviewDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 409) {
        const _responseText = response.data;
        let result409: any = null;
        let resultData409  = _responseText;
        result409 = Types.initErrorResponse(resultData409);
        return throwException("Conflict", status, _responseText, _headers, result409);

    } else if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400  = _responseText;
        result400 = Types.initErrorResponse(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);

    } else if (status === 500) {
        const _responseText = response.data;
        let result500: any = null;
        let resultData500  = _responseText;
        result500 = Types.initErrorResponse(resultData500);
        return throwException("Internal Server Error", status, _responseText, _headers, result500);

    } else if (status === 401) {
        const _responseText = response.data;
        let result401: any = null;
        let resultData401  = _responseText;
        result401 = Types.initErrorResponse(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);

    } else if (status === 404) {
        const _responseText = response.data;
        let result404: any = null;
        let resultData404  = _responseText;
        result404 = Types.initErrorResponse(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.initInterviewDto(resultData200);
        return Promise.resolve<Types.InterviewDto>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.InterviewDto>(null as any);
}

/**
 * Обновить отбор
 * @param interviewId Id отбора
 * @return OK
 */
export function updateInterview(interviewId: string, body: Types.UpdateInterviewDto, config?: AxiosRequestConfig | undefined): Promise<Types.InterviewDto> {
    let url_ = getBaseUrl() + "/api/v1/interview/{interviewId}";
    if (interviewId === undefined || interviewId === null)
      throw new Error("The parameter 'interviewId' must be defined.");
    url_ = url_.replace("{interviewId}", encodeURIComponent("" + interviewId));
      url_ = url_.replace(/[?&]$/, "");

    const content_ = Types.serializeUpdateInterviewDto(body);

    let options_: AxiosRequestConfig = {
        ..._requestConfigUpdateInterview,
        ...config,
        data: content_,
        method: "PUT",
        url: url_,
        headers: {
            ..._requestConfigUpdateInterview?.headers,
            "Content-Type": "application/json",
            "Accept": "*/*",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processUpdateInterview(_response);
    });
}

function processUpdateInterview(response: AxiosResponse): Promise<Types.InterviewDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 409) {
        const _responseText = response.data;
        let result409: any = null;
        let resultData409  = _responseText;
        result409 = Types.initErrorResponse(resultData409);
        return throwException("Conflict", status, _responseText, _headers, result409);

    } else if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400  = _responseText;
        result400 = Types.initErrorResponse(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);

    } else if (status === 500) {
        const _responseText = response.data;
        let result500: any = null;
        let resultData500  = _responseText;
        result500 = Types.initErrorResponse(resultData500);
        return throwException("Internal Server Error", status, _responseText, _headers, result500);

    } else if (status === 401) {
        const _responseText = response.data;
        let result401: any = null;
        let resultData401  = _responseText;
        result401 = Types.initErrorResponse(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);

    } else if (status === 404) {
        const _responseText = response.data;
        let result404: any = null;
        let resultData404  = _responseText;
        result404 = Types.initErrorResponse(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.initInterviewDto(resultData200);
        return Promise.resolve<Types.InterviewDto>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.InterviewDto>(null as any);
}

/**
 * Удалить отбор
 * @param interviewId Id отбора
 * @return OK
 */
export function deleteInterview(interviewId: string, config?: AxiosRequestConfig | undefined): Promise<Types.Response> {
    let url_ = getBaseUrl() + "/api/v1/interview/{interviewId}";
    if (interviewId === undefined || interviewId === null)
      throw new Error("The parameter 'interviewId' must be defined.");
    url_ = url_.replace("{interviewId}", encodeURIComponent("" + interviewId));
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigDeleteInterview,
        ...config,
        method: "DELETE",
        url: url_,
        headers: {
            ..._requestConfigDeleteInterview?.headers,
            "Accept": "*/*",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processDeleteInterview(_response);
    });
}

function processDeleteInterview(response: AxiosResponse): Promise<Types.Response> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 409) {
        const _responseText = response.data;
        let result409: any = null;
        let resultData409  = _responseText;
        result409 = Types.initErrorResponse(resultData409);
        return throwException("Conflict", status, _responseText, _headers, result409);

    } else if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400  = _responseText;
        result400 = Types.initErrorResponse(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);

    } else if (status === 500) {
        const _responseText = response.data;
        let result500: any = null;
        let resultData500  = _responseText;
        result500 = Types.initErrorResponse(resultData500);
        return throwException("Internal Server Error", status, _responseText, _headers, result500);

    } else if (status === 401) {
        const _responseText = response.data;
        let result401: any = null;
        let resultData401  = _responseText;
        result401 = Types.initErrorResponse(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);

    } else if (status === 404) {
        const _responseText = response.data;
        let result404: any = null;
        let resultData404  = _responseText;
        result404 = Types.initErrorResponse(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.initResponse(resultData200);
        return Promise.resolve<Types.Response>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.Response>(null as any);
}

/**
 * Создать отбор
 * @return OK
 */
export function createInterview(body: Types.CreateInterviewDto, config?: AxiosRequestConfig | undefined): Promise<Types.InterviewDto> {
    let url_ = getBaseUrl() + "/api/v1/interview";
      url_ = url_.replace(/[?&]$/, "");

    const content_ = Types.serializeCreateInterviewDto(body);

    let options_: AxiosRequestConfig = {
        ..._requestConfigCreateInterview,
        ...config,
        data: content_,
        method: "POST",
        url: url_,
        headers: {
            ..._requestConfigCreateInterview?.headers,
            "Content-Type": "application/json",
            "Accept": "*/*",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processCreateInterview(_response);
    });
}

function processCreateInterview(response: AxiosResponse): Promise<Types.InterviewDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 409) {
        const _responseText = response.data;
        let result409: any = null;
        let resultData409  = _responseText;
        result409 = Types.initErrorResponse(resultData409);
        return throwException("Conflict", status, _responseText, _headers, result409);

    } else if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400  = _responseText;
        result400 = Types.initErrorResponse(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);

    } else if (status === 500) {
        const _responseText = response.data;
        let result500: any = null;
        let resultData500  = _responseText;
        result500 = Types.initErrorResponse(resultData500);
        return throwException("Internal Server Error", status, _responseText, _headers, result500);

    } else if (status === 401) {
        const _responseText = response.data;
        let result401: any = null;
        let resultData401  = _responseText;
        result401 = Types.initErrorResponse(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);

    } else if (status === 404) {
        const _responseText = response.data;
        let result404: any = null;
        let resultData404  = _responseText;
        result404 = Types.initErrorResponse(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.initInterviewDto(resultData200);
        return Promise.resolve<Types.InterviewDto>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.InterviewDto>(null as any);
}

/**
 * Получить список отборов
 * @param studentName (optional) ФИО студента (разрешается частичное совпадение)
 * @param partnerId (optional) Идентификатор компании-партнера
 * @param stackId (optional) Идентификатор стека
 * @param languageIds (optional) Идентификаторы ЯПов
 * @param studentGroupId (optional) Идентификатор группы
 * @param status (optional) Статус отбора
 * @param modifiedAtFrom (optional) Время последнего обновления отборов (от)
 * @param modifiedAtTo (optional) Время последнего обновления отборов (до)
 * @param page (optional) Zero-based page index (0..N)
 * @param size (optional) The size of the page to be returned
 * @param sort (optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
 * @return OK
 */
export function getInterviewList(studentName?: string | undefined, partnerId?: string | undefined, stackId?: string | undefined, languageIds?: string[] | undefined, studentGroupId?: string | undefined, status?: Types.Status | undefined, modifiedAtFrom?: Date | undefined, modifiedAtTo?: Date | undefined, page?: number | undefined, size?: number | undefined, sort?: string[] | undefined, config?: AxiosRequestConfig | undefined): Promise<Types.PagedListDtoInterviewDto> {
    let url_ = getBaseUrl() + "/api/v1/interview/program-lead/list?";
    if (studentName === null)
        throw new Error("The parameter 'studentName' cannot be null.");
    else if (studentName !== undefined)
        url_ += "studentName=" + encodeURIComponent("" + studentName) + "&";
    if (partnerId === null)
        throw new Error("The parameter 'partnerId' cannot be null.");
    else if (partnerId !== undefined)
        url_ += "partnerId=" + encodeURIComponent("" + partnerId) + "&";
    if (stackId === null)
        throw new Error("The parameter 'stackId' cannot be null.");
    else if (stackId !== undefined)
        url_ += "stackId=" + encodeURIComponent("" + stackId) + "&";
    if (languageIds === null)
        throw new Error("The parameter 'languageIds' cannot be null.");
    else if (languageIds !== undefined)
        languageIds && languageIds.forEach(item => { url_ += "languageIds=" + encodeURIComponent("" + item) + "&"; });
    if (studentGroupId === null)
        throw new Error("The parameter 'studentGroupId' cannot be null.");
    else if (studentGroupId !== undefined)
        url_ += "studentGroupId=" + encodeURIComponent("" + studentGroupId) + "&";
    if (status === null)
        throw new Error("The parameter 'status' cannot be null.");
    else if (status !== undefined)
        url_ += "status=" + encodeURIComponent("" + status) + "&";
    if (modifiedAtFrom === null)
        throw new Error("The parameter 'modifiedAtFrom' cannot be null.");
    else if (modifiedAtFrom !== undefined)
        url_ += "modifiedAtFrom=" + encodeURIComponent(modifiedAtFrom ? "" + modifiedAtFrom.toISOString() : "") + "&";
    if (modifiedAtTo === null)
        throw new Error("The parameter 'modifiedAtTo' cannot be null.");
    else if (modifiedAtTo !== undefined)
        url_ += "modifiedAtTo=" + encodeURIComponent(modifiedAtTo ? "" + modifiedAtTo.toISOString() : "") + "&";
    if (page === null)
        throw new Error("The parameter 'page' cannot be null.");
    else if (page !== undefined)
        url_ += "page=" + encodeURIComponent("" + page) + "&";
    if (size === null)
        throw new Error("The parameter 'size' cannot be null.");
    else if (size !== undefined)
        url_ += "size=" + encodeURIComponent("" + size) + "&";
    if (sort === null)
        throw new Error("The parameter 'sort' cannot be null.");
    else if (sort !== undefined)
        sort && sort.forEach(item => { url_ += "sort=" + encodeURIComponent("" + item) + "&"; });
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigGetInterviewList,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigGetInterviewList?.headers,
            "Accept": "*/*",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processGetInterviewList(_response);
    });
}

function processGetInterviewList(response: AxiosResponse): Promise<Types.PagedListDtoInterviewDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 409) {
        const _responseText = response.data;
        let result409: any = null;
        let resultData409  = _responseText;
        result409 = Types.initErrorResponse(resultData409);
        return throwException("Conflict", status, _responseText, _headers, result409);

    } else if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400  = _responseText;
        result400 = Types.initErrorResponse(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);

    } else if (status === 500) {
        const _responseText = response.data;
        let result500: any = null;
        let resultData500  = _responseText;
        result500 = Types.initErrorResponse(resultData500);
        return throwException("Internal Server Error", status, _responseText, _headers, result500);

    } else if (status === 401) {
        const _responseText = response.data;
        let result401: any = null;
        let resultData401  = _responseText;
        result401 = Types.initErrorResponse(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);

    } else if (status === 404) {
        const _responseText = response.data;
        let result404: any = null;
        let resultData404  = _responseText;
        result404 = Types.initErrorResponse(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.initPagedListDtoInterviewDto(resultData200);
        return Promise.resolve<Types.PagedListDtoInterviewDto>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.PagedListDtoInterviewDto>(null as any);
}

/**
 * Получить список отборов
 * @param page (optional) Zero-based page index (0..N)
 * @param size (optional) The size of the page to be returned
 * @param sort (optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
 * @return OK
 */
export function getInterviewList_1(page?: number | undefined, size?: number | undefined, sort?: string[] | undefined, config?: AxiosRequestConfig | undefined): Promise<Types.PagedListDtoInterviewDto> {
    let url_ = getBaseUrl() + "/api/v1/interview/list?";
    if (page === null)
        throw new Error("The parameter 'page' cannot be null.");
    else if (page !== undefined)
        url_ += "page=" + encodeURIComponent("" + page) + "&";
    if (size === null)
        throw new Error("The parameter 'size' cannot be null.");
    else if (size !== undefined)
        url_ += "size=" + encodeURIComponent("" + size) + "&";
    if (sort === null)
        throw new Error("The parameter 'sort' cannot be null.");
    else if (sort !== undefined)
        sort && sort.forEach(item => { url_ += "sort=" + encodeURIComponent("" + item) + "&"; });
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigGetInterviewList_1,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigGetInterviewList_1?.headers,
            "Accept": "*/*",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processGetInterviewList_1(_response);
    });
}

function processGetInterviewList_1(response: AxiosResponse): Promise<Types.PagedListDtoInterviewDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 409) {
        const _responseText = response.data;
        let result409: any = null;
        let resultData409  = _responseText;
        result409 = Types.initErrorResponse(resultData409);
        return throwException("Conflict", status, _responseText, _headers, result409);

    } else if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400  = _responseText;
        result400 = Types.initErrorResponse(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);

    } else if (status === 500) {
        const _responseText = response.data;
        let result500: any = null;
        let resultData500  = _responseText;
        result500 = Types.initErrorResponse(resultData500);
        return throwException("Internal Server Error", status, _responseText, _headers, result500);

    } else if (status === 401) {
        const _responseText = response.data;
        let result401: any = null;
        let resultData401  = _responseText;
        result401 = Types.initErrorResponse(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);

    } else if (status === 404) {
        const _responseText = response.data;
        let result404: any = null;
        let resultData404  = _responseText;
        result404 = Types.initErrorResponse(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.initPagedListDtoInterviewDto(resultData200);
        return Promise.resolve<Types.PagedListDtoInterviewDto>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.PagedListDtoInterviewDto>(null as any);
}
let _requestConfigGetInterview: Partial<AxiosRequestConfig> | null;
export function getGetInterviewRequestConfig() {
  return _requestConfigGetInterview;
}
export function setGetInterviewRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigGetInterview = value;
}
export function patchGetInterviewRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigGetInterview = patch(_requestConfigGetInterview ?? {});
}

let _requestConfigUpdateInterview: Partial<AxiosRequestConfig> | null;
export function getUpdateInterviewRequestConfig() {
  return _requestConfigUpdateInterview;
}
export function setUpdateInterviewRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigUpdateInterview = value;
}
export function patchUpdateInterviewRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigUpdateInterview = patch(_requestConfigUpdateInterview ?? {});
}

let _requestConfigDeleteInterview: Partial<AxiosRequestConfig> | null;
export function getDeleteInterviewRequestConfig() {
  return _requestConfigDeleteInterview;
}
export function setDeleteInterviewRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigDeleteInterview = value;
}
export function patchDeleteInterviewRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigDeleteInterview = patch(_requestConfigDeleteInterview ?? {});
}

let _requestConfigCreateInterview: Partial<AxiosRequestConfig> | null;
export function getCreateInterviewRequestConfig() {
  return _requestConfigCreateInterview;
}
export function setCreateInterviewRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigCreateInterview = value;
}
export function patchCreateInterviewRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigCreateInterview = patch(_requestConfigCreateInterview ?? {});
}

let _requestConfigGetInterviewList: Partial<AxiosRequestConfig> | null;
export function getGetInterviewListRequestConfig() {
  return _requestConfigGetInterviewList;
}
export function setGetInterviewListRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigGetInterviewList = value;
}
export function patchGetInterviewListRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigGetInterviewList = patch(_requestConfigGetInterviewList ?? {});
}

let _requestConfigGetInterviewList_1: Partial<AxiosRequestConfig> | null;
export function getGetInterviewList_1RequestConfig() {
  return _requestConfigGetInterviewList_1;
}
export function setGetInterviewList_1RequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigGetInterviewList_1 = value;
}
export function patchGetInterviewList_1RequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigGetInterviewList_1 = patch(_requestConfigGetInterviewList_1 ?? {});
}