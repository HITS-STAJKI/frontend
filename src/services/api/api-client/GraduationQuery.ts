//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../api-client.types';
import { useQuery, useMutation } from '@tanstack/react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from '@tanstack/react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import * as Client from './GraduationClient'
export { Client };
import type { AxiosRequestConfig } from 'axios';

export type GraduateGroupGraduationQueryParameters = {
  groupId: string ;
}

export function changeStudentGraduationStatusUrl(): string {
  let url_ = getBaseUrl() + "/api/v1/graduation";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function changeStudentGraduationStatusMutationKey(): MutationKey {
  return trimArrayEnd([
      'GraduationClient',
      'changeStudentGraduationStatus',
    ]);
}

/**
 * Изменение статуса выпуска конкретного студента
 * @return OK
 */
export function useChangeStudentGraduationStatusMutation<TContext>(options?: Omit<UseMutationOptions<Types.Response, unknown, Types.ChangeStudentGraduationStatusDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.Response, unknown, Types.ChangeStudentGraduationStatusDto, TContext> {
  const key = changeStudentGraduationStatusMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (body: Types.ChangeStudentGraduationStatusDto) => Client.changeStudentGraduationStatus(body),
    mutationKey: key,
  });
}
  
export function graduateGroupUrl(groupId: string): string {
  let url_ = getBaseUrl() + "/api/v1/graduation/{groupId}";
if (groupId === undefined || groupId === null)
  throw new Error("The parameter 'groupId' must be defined.");
url_ = url_.replace("{groupId}", encodeURIComponent("" + groupId));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function graduateGroupMutationKey(groupId: string): MutationKey {
  return trimArrayEnd([
      'GraduationClient',
      'graduateGroup',
      groupId as any,
    ]);
}

/**
 * Выпуск потока
 * @param groupId Идентификатор потока
 * @return OK
 */
export function useGraduateGroupMutation<TContext>(groupId: string, options?: Omit<UseMutationOptions<Types.Response, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.Response, unknown, void, TContext> {
  const key = graduateGroupMutationKey(groupId);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client.graduateGroup(groupId),
    mutationKey: key,
  });
}
  
type GraduateGroup__MutationParameters = GraduateGroupGraduationQueryParameters

/**
 * Выпуск потока
 * @param groupId Идентификатор потока
 * @return OK
 */
export function useGraduateGroupMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<Types.Response, unknown, GraduateGroup__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: GraduateGroupGraduationQueryParameters}): UseMutationResult<Types.Response, unknown, GraduateGroup__MutationParameters, TContext> {
  const key = graduateGroupMutationKey(options?.parameters?.groupId!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: GraduateGroup__MutationParameters) => Client.graduateGroup(data.groupId ?? options?.parameters?.groupId!),
  mutationKey: key,
});
}