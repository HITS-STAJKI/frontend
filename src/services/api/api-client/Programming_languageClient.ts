//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../api-client.types';
import type { AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

import { throwException, isAxiosError } from '../api-client.types';
import { getAxios, getBaseUrl } from './helpers';

/**
 * Обновить язык программирования
 * @param languageId Идентификатор языка
 * @return OK
 */
export function updateLanguage(languageId: string, body: Types.UpdateLanguageDto, config?: AxiosRequestConfig | undefined): Promise<Types.LanguageDto> {
    let url_ = getBaseUrl() + "/api/v1/language/{languageId}";
    if (languageId === undefined || languageId === null)
      throw new Error("The parameter 'languageId' must be defined.");
    url_ = url_.replace("{languageId}", encodeURIComponent("" + languageId));
      url_ = url_.replace(/[?&]$/, "");

    const content_ = Types.serializeUpdateLanguageDto(body);

    let options_: AxiosRequestConfig = {
        ..._requestConfigUpdateLanguage,
        ...config,
        data: content_,
        method: "PUT",
        url: url_,
        headers: {
            ..._requestConfigUpdateLanguage?.headers,
            "Content-Type": "application/json",
            "Accept": "*/*",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processUpdateLanguage(_response);
    });
}

function processUpdateLanguage(response: AxiosResponse): Promise<Types.LanguageDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 409) {
        const _responseText = response.data;
        let result409: any = null;
        let resultData409  = _responseText;
        result409 = Types.initErrorResponse(resultData409);
        return throwException("Conflict", status, _responseText, _headers, result409);

    } else if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400  = _responseText;
        result400 = Types.initErrorResponse(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);

    } else if (status === 500) {
        const _responseText = response.data;
        let result500: any = null;
        let resultData500  = _responseText;
        result500 = Types.initErrorResponse(resultData500);
        return throwException("Internal Server Error", status, _responseText, _headers, result500);

    } else if (status === 401) {
        const _responseText = response.data;
        let result401: any = null;
        let resultData401  = _responseText;
        result401 = Types.initErrorResponse(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);

    } else if (status === 404) {
        const _responseText = response.data;
        let result404: any = null;
        let resultData404  = _responseText;
        result404 = Types.initErrorResponse(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.initLanguageDto(resultData200);
        return Promise.resolve<Types.LanguageDto>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.LanguageDto>(null as any);
}

/**
 * Удалить язык программирования
 * @param languageId Идентификатор языка
 * @return OK
 */
export function deleteLanguage(languageId: string, config?: AxiosRequestConfig | undefined): Promise<Types.Response> {
    let url_ = getBaseUrl() + "/api/v1/language/{languageId}";
    if (languageId === undefined || languageId === null)
      throw new Error("The parameter 'languageId' must be defined.");
    url_ = url_.replace("{languageId}", encodeURIComponent("" + languageId));
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigDeleteLanguage,
        ...config,
        method: "DELETE",
        url: url_,
        headers: {
            ..._requestConfigDeleteLanguage?.headers,
            "Accept": "*/*",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processDeleteLanguage(_response);
    });
}

function processDeleteLanguage(response: AxiosResponse): Promise<Types.Response> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 409) {
        const _responseText = response.data;
        let result409: any = null;
        let resultData409  = _responseText;
        result409 = Types.initErrorResponse(resultData409);
        return throwException("Conflict", status, _responseText, _headers, result409);

    } else if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400  = _responseText;
        result400 = Types.initErrorResponse(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);

    } else if (status === 500) {
        const _responseText = response.data;
        let result500: any = null;
        let resultData500  = _responseText;
        result500 = Types.initErrorResponse(resultData500);
        return throwException("Internal Server Error", status, _responseText, _headers, result500);

    } else if (status === 401) {
        const _responseText = response.data;
        let result401: any = null;
        let resultData401  = _responseText;
        result401 = Types.initErrorResponse(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);

    } else if (status === 404) {
        const _responseText = response.data;
        let result404: any = null;
        let resultData404  = _responseText;
        result404 = Types.initErrorResponse(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.initResponse(resultData200);
        return Promise.resolve<Types.Response>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.Response>(null as any);
}

/**
 * Создать язык программирования
 * @return OK
 */
export function createLanguage(body: Types.CreateLanguageDto, config?: AxiosRequestConfig | undefined): Promise<Types.LanguageDto> {
    let url_ = getBaseUrl() + "/api/v1/language";
      url_ = url_.replace(/[?&]$/, "");

    const content_ = Types.serializeCreateLanguageDto(body);

    let options_: AxiosRequestConfig = {
        ..._requestConfigCreateLanguage,
        ...config,
        data: content_,
        method: "POST",
        url: url_,
        headers: {
            ..._requestConfigCreateLanguage?.headers,
            "Content-Type": "application/json",
            "Accept": "*/*",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processCreateLanguage(_response);
    });
}

function processCreateLanguage(response: AxiosResponse): Promise<Types.LanguageDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 409) {
        const _responseText = response.data;
        let result409: any = null;
        let resultData409  = _responseText;
        result409 = Types.initErrorResponse(resultData409);
        return throwException("Conflict", status, _responseText, _headers, result409);

    } else if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400  = _responseText;
        result400 = Types.initErrorResponse(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);

    } else if (status === 500) {
        const _responseText = response.data;
        let result500: any = null;
        let resultData500  = _responseText;
        result500 = Types.initErrorResponse(resultData500);
        return throwException("Internal Server Error", status, _responseText, _headers, result500);

    } else if (status === 401) {
        const _responseText = response.data;
        let result401: any = null;
        let resultData401  = _responseText;
        result401 = Types.initErrorResponse(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);

    } else if (status === 404) {
        const _responseText = response.data;
        let result404: any = null;
        let resultData404  = _responseText;
        result404 = Types.initErrorResponse(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.initLanguageDto(resultData200);
        return Promise.resolve<Types.LanguageDto>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.LanguageDto>(null as any);
}

/**
 * Получить список языков
 * @param query (optional) Название языка
 * @return OK
 */
export function getLanguageList(query?: string | undefined, config?: AxiosRequestConfig | undefined): Promise<Types.LanguageDto[]> {
    let url_ = getBaseUrl() + "/api/v1/language/list?";
    if (query === null)
        throw new Error("The parameter 'query' cannot be null.");
    else if (query !== undefined)
        url_ += "query=" + encodeURIComponent("" + query) + "&";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigGetLanguageList,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigGetLanguageList?.headers,
            "Accept": "*/*",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processGetLanguageList(_response);
    });
}

function processGetLanguageList(response: AxiosResponse): Promise<Types.LanguageDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 409) {
        const _responseText = response.data;
        let result409: any = null;
        let resultData409  = _responseText;
        result409 = Types.initErrorResponse(resultData409);
        return throwException("Conflict", status, _responseText, _headers, result409);

    } else if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400  = _responseText;
        result400 = Types.initErrorResponse(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);

    } else if (status === 500) {
        const _responseText = response.data;
        let result500: any = null;
        let resultData500  = _responseText;
        result500 = Types.initErrorResponse(resultData500);
        return throwException("Internal Server Error", status, _responseText, _headers, result500);

    } else if (status === 401) {
        const _responseText = response.data;
        let result401: any = null;
        let resultData401  = _responseText;
        result401 = Types.initErrorResponse(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);

    } else if (status === 404) {
        const _responseText = response.data;
        let result404: any = null;
        let resultData404  = _responseText;
        result404 = Types.initErrorResponse(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        if (Array.isArray(resultData200)) {
              result200 = resultData200.map(item => 
                Types.initLanguageDto(item)
              );
            }
        return Promise.resolve<Types.LanguageDto[]>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.LanguageDto[]>(null as any);
}
let _requestConfigUpdateLanguage: Partial<AxiosRequestConfig> | null;
export function getUpdateLanguageRequestConfig() {
  return _requestConfigUpdateLanguage;
}
export function setUpdateLanguageRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigUpdateLanguage = value;
}
export function patchUpdateLanguageRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigUpdateLanguage = patch(_requestConfigUpdateLanguage ?? {});
}

let _requestConfigDeleteLanguage: Partial<AxiosRequestConfig> | null;
export function getDeleteLanguageRequestConfig() {
  return _requestConfigDeleteLanguage;
}
export function setDeleteLanguageRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigDeleteLanguage = value;
}
export function patchDeleteLanguageRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigDeleteLanguage = patch(_requestConfigDeleteLanguage ?? {});
}

let _requestConfigCreateLanguage: Partial<AxiosRequestConfig> | null;
export function getCreateLanguageRequestConfig() {
  return _requestConfigCreateLanguage;
}
export function setCreateLanguageRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigCreateLanguage = value;
}
export function patchCreateLanguageRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigCreateLanguage = patch(_requestConfigCreateLanguage ?? {});
}

let _requestConfigGetLanguageList: Partial<AxiosRequestConfig> | null;
export function getGetLanguageListRequestConfig() {
  return _requestConfigGetLanguageList;
}
export function setGetLanguageListRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigGetLanguageList = value;
}
export function patchGetLanguageListRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigGetLanguageList = patch(_requestConfigGetLanguageList ?? {});
}