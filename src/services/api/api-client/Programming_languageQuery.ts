//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../api-client.types';
import { useQuery, useMutation } from '@tanstack/react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from '@tanstack/react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import * as Client from './Programming_languageClient'
export { Client };
import type { AxiosRequestConfig } from 'axios';

export type UpdateLanguageProgramming_languageQueryParameters = {
  languageId: string ;
}

export type DeleteLanguageProgramming_languageQueryParameters = {
  languageId: string ;
}

export type GetLanguageListProgramming_languageQueryParameters = {
  query?: string | undefined ;
}

export function updateLanguageUrl(languageId: string): string {
  let url_ = getBaseUrl() + "/api/v1/language/{languageId}";
if (languageId === undefined || languageId === null)
  throw new Error("The parameter 'languageId' must be defined.");
url_ = url_.replace("{languageId}", encodeURIComponent("" + languageId));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function updateLanguageMutationKey(languageId: string): MutationKey {
  return trimArrayEnd([
      'Programming_languageClient',
      'updateLanguage',
      languageId as any,
    ]);
}

/**
 * Обновить язык программирования
 * @param languageId Идентификатор языка
 * @return OK
 */
export function useUpdateLanguageMutation<TContext>(languageId: string, options?: Omit<UseMutationOptions<Types.LanguageDto, unknown, Types.UpdateLanguageDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.LanguageDto, unknown, Types.UpdateLanguageDto, TContext> {
  const key = updateLanguageMutationKey(languageId);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (body: Types.UpdateLanguageDto) => Client.updateLanguage(languageId, body),
    mutationKey: key,
  });
}
  
type UpdateLanguage__MutationParameters = UpdateLanguageProgramming_languageQueryParameters & {
  body: Types.UpdateLanguageDto;
}

/**
 * Обновить язык программирования
 * @param languageId Идентификатор языка
 * @return OK
 */
export function useUpdateLanguageMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<Types.LanguageDto, unknown, UpdateLanguage__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: UpdateLanguageProgramming_languageQueryParameters}): UseMutationResult<Types.LanguageDto, unknown, UpdateLanguage__MutationParameters, TContext> {
  const key = updateLanguageMutationKey(options?.parameters?.languageId!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: UpdateLanguage__MutationParameters) => Client.updateLanguage(data.languageId ?? options?.parameters?.languageId!, data.body),
  mutationKey: key,
});
}
  
export function deleteLanguageUrl(languageId: string): string {
  let url_ = getBaseUrl() + "/api/v1/language/{languageId}";
if (languageId === undefined || languageId === null)
  throw new Error("The parameter 'languageId' must be defined.");
url_ = url_.replace("{languageId}", encodeURIComponent("" + languageId));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function deleteLanguageMutationKey(languageId: string): MutationKey {
  return trimArrayEnd([
      'Programming_languageClient',
      'deleteLanguage',
      languageId as any,
    ]);
}

/**
 * Удалить язык программирования
 * @param languageId Идентификатор языка
 * @return OK
 */
export function useDeleteLanguageMutation<TContext>(languageId: string, options?: Omit<UseMutationOptions<Types.Response, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.Response, unknown, void, TContext> {
  const key = deleteLanguageMutationKey(languageId);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client.deleteLanguage(languageId),
    mutationKey: key,
  });
}
  
type DeleteLanguage__MutationParameters = DeleteLanguageProgramming_languageQueryParameters

/**
 * Удалить язык программирования
 * @param languageId Идентификатор языка
 * @return OK
 */
export function useDeleteLanguageMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<Types.Response, unknown, DeleteLanguage__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: DeleteLanguageProgramming_languageQueryParameters}): UseMutationResult<Types.Response, unknown, DeleteLanguage__MutationParameters, TContext> {
  const key = deleteLanguageMutationKey(options?.parameters?.languageId!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: DeleteLanguage__MutationParameters) => Client.deleteLanguage(data.languageId ?? options?.parameters?.languageId!),
  mutationKey: key,
});
}
  
export function createLanguageUrl(): string {
  let url_ = getBaseUrl() + "/api/v1/language";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function createLanguageMutationKey(): MutationKey {
  return trimArrayEnd([
      'Programming_languageClient',
      'createLanguage',
    ]);
}

/**
 * Создать язык программирования
 * @return OK
 */
export function useCreateLanguageMutation<TContext>(options?: Omit<UseMutationOptions<Types.LanguageDto, unknown, Types.CreateLanguageDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.LanguageDto, unknown, Types.CreateLanguageDto, TContext> {
  const key = createLanguageMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (body: Types.CreateLanguageDto) => Client.createLanguage(body),
    mutationKey: key,
  });
}
  
export function getLanguageListUrl(query?: string | undefined): string {
  let url_ = getBaseUrl() + "/api/v1/language/list?";
if (query === null)
    throw new Error("The parameter 'query' cannot be null.");
else if (query !== undefined)
    url_ += "query=" + encodeURIComponent("" + query) + "&";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getLanguageListDefaultOptions: Omit<UseQueryOptions<Types.LanguageDto[], unknown, Types.LanguageDto[]>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<Types.LanguageDto[], unknown, Types.LanguageDto[]>, 'queryFn'>> = {
};
export function getGetLanguageListDefaultOptions() {
  return getLanguageListDefaultOptions;
};
export function setGetLanguageListDefaultOptions(options: typeof getLanguageListDefaultOptions) {
  getLanguageListDefaultOptions = options;
}

export function getLanguageListQueryKey(query?: string | undefined): QueryKey;
export function getLanguageListQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { query,  } = params[0] as GetLanguageListProgramming_languageQueryParameters;

    return trimArrayEnd([
        'Programming_languageClient',
        'getLanguageList',
        query as any,
      ]);
  } else {
    return trimArrayEnd([
        'Programming_languageClient',
        'getLanguageList',
        ...params
      ]);
  }
}
export function __getLanguageList(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.getLanguageList(
      context.queryKey[2] as string | undefined,axiosConfig    );
}

export function useGetLanguageListQuery<TSelectData = Types.LanguageDto[], TError = unknown>(dto: GetLanguageListProgramming_languageQueryParameters, options?: Omit<UseQueryOptions<Types.LanguageDto[], TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
/**
 * Получить список языков
 * @param query (optional) Название языка
 * @return OK
 */
export function useGetLanguageListQuery<TSelectData = Types.LanguageDto[], TError = unknown>(query?: string | undefined, options?: Omit<UseQueryOptions<Types.LanguageDto[], TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useGetLanguageListQuery<TSelectData = Types.LanguageDto[], TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.LanguageDto[], TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  let query: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ query,  } = params[0] as GetLanguageListProgramming_languageQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [query, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.LanguageDto[], TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __getLanguageList(context, axiosConfig) : __getLanguageList,
    queryKey: getLanguageListQueryKey(query),
    ...getLanguageListDefaultOptions as unknown as Omit<UseQueryOptions<Types.LanguageDto[], TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Получить список языков
 * @param query (optional) Название языка
 * @return OK
 */
export function setGetLanguageListData(queryClient: QueryClient, updater: (data: Types.LanguageDto[] | undefined) => Types.LanguageDto[], query?: string | undefined) {
  queryClient.setQueryData(getLanguageListQueryKey(query),
    updater
  );
}

/**
 * Получить список языков
 * @param query (optional) Название языка
 * @return OK
 */
export function setGetLanguageListDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.LanguageDto[] | undefined) => Types.LanguageDto[]) {
  queryClient.setQueryData(queryKey, updater);
}