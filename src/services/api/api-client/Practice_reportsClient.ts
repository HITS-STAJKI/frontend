//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../api-client.types';
import type { AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

import { throwException, isAxiosError } from '../api-client.types';
import { getAxios, getBaseUrl } from './helpers';

/**
 * Открепить файл от отчета
 * @param reportId Идентификатор отчета
 * @return OK
 */
export function unattachFileFromReport(reportId: Types.ReportId, config?: AxiosRequestConfig | undefined): Promise<Types.ReportDto> {
    let url_ = getBaseUrl() + "/api/v1/report/file/unattach?";
      if (reportId === undefined || reportId === null)
        throw new Error("The parameter 'reportId' must be defined and cannot be null.");
      else
        url_ += "reportId=" + encodeURIComponent("" + reportId) + "&";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigUnattachFileFromReport,
        ...config,
        method: "POST",
        url: url_,
        headers: {
            ..._requestConfigUnattachFileFromReport?.headers,
            "Accept": "*/*",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processUnattachFileFromReport(_response);
    });
}

function processUnattachFileFromReport(response: AxiosResponse): Promise<Types.ReportDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 409) {
        const _responseText = response.data;
        let result409: any = null;
        let resultData409  = _responseText;
        result409 = Types.initErrorResponse(resultData409);
        return throwException("Conflict", status, _responseText, _headers, result409);

    } else if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400  = _responseText;
        result400 = Types.initErrorResponse(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);

    } else if (status === 500) {
        const _responseText = response.data;
        let result500: any = null;
        let resultData500  = _responseText;
        result500 = Types.initErrorResponse(resultData500);
        return throwException("Internal Server Error", status, _responseText, _headers, result500);

    } else if (status === 404) {
        const _responseText = response.data;
        let result404: any = null;
        let resultData404  = _responseText;
        result404 = Types.initErrorResponse(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.initReportDto(resultData200);
        return Promise.resolve<Types.ReportDto>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.ReportDto>(null as any);
}

/**
 * Прикрепить файл к отчету
 * @param reportId Идентификатор отчета
 * @param fileId Идентификатор файла
 * @return OK
 */
export function attachFileToReport(reportId: Types.ReportId, fileId: string, config?: AxiosRequestConfig | undefined): Promise<Types.ReportDto> {
    let url_ = getBaseUrl() + "/api/v1/report/file/attach?";
      if (reportId === undefined || reportId === null)
        throw new Error("The parameter 'reportId' must be defined and cannot be null.");
      else
        url_ += "reportId=" + encodeURIComponent("" + reportId) + "&";
      if (fileId === undefined || fileId === null)
        throw new Error("The parameter 'fileId' must be defined and cannot be null.");
      else
        url_ += "fileId=" + encodeURIComponent("" + fileId) + "&";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigAttachFileToReport,
        ...config,
        method: "POST",
        url: url_,
        headers: {
            ..._requestConfigAttachFileToReport?.headers,
            "Accept": "*/*",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processAttachFileToReport(_response);
    });
}

function processAttachFileToReport(response: AxiosResponse): Promise<Types.ReportDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 409) {
        const _responseText = response.data;
        let result409: any = null;
        let resultData409  = _responseText;
        result409 = Types.initErrorResponse(resultData409);
        return throwException("Conflict", status, _responseText, _headers, result409);

    } else if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400  = _responseText;
        result400 = Types.initErrorResponse(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);

    } else if (status === 500) {
        const _responseText = response.data;
        let result500: any = null;
        let resultData500  = _responseText;
        result500 = Types.initErrorResponse(resultData500);
        return throwException("Internal Server Error", status, _responseText, _headers, result500);

    } else if (status === 404) {
        const _responseText = response.data;
        let result404: any = null;
        let resultData404  = _responseText;
        result404 = Types.initErrorResponse(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.initReportDto(resultData200);
        return Promise.resolve<Types.ReportDto>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.ReportDto>(null as any);
}

/**
 * Изменить оценку отчета о практике
 * @param reportId Идентификатор отчета
 * @param grade Оценка отчета
 * @return OK
 */
export function setGrade(reportId: Types.ReportId, grade: number, config?: AxiosRequestConfig | undefined): Promise<Types.ReportDto> {
    let url_ = getBaseUrl() + "/api/v1/report/grade?";
      if (reportId === undefined || reportId === null)
        throw new Error("The parameter 'reportId' must be defined and cannot be null.");
      else
        url_ += "reportId=" + encodeURIComponent("" + reportId) + "&";
      if (grade === undefined || grade === null)
        throw new Error("The parameter 'grade' must be defined and cannot be null.");
      else
        url_ += "grade=" + encodeURIComponent("" + grade) + "&";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigSetGrade,
        ...config,
        method: "PATCH",
        url: url_,
        headers: {
            ..._requestConfigSetGrade?.headers,
            "Accept": "*/*",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processSetGrade(_response);
    });
}

function processSetGrade(response: AxiosResponse): Promise<Types.ReportDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 409) {
        const _responseText = response.data;
        let result409: any = null;
        let resultData409  = _responseText;
        result409 = Types.initErrorResponse(resultData409);
        return throwException("Conflict", status, _responseText, _headers, result409);

    } else if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400  = _responseText;
        result400 = Types.initErrorResponse(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);

    } else if (status === 500) {
        const _responseText = response.data;
        let result500: any = null;
        let resultData500  = _responseText;
        result500 = Types.initErrorResponse(resultData500);
        return throwException("Internal Server Error", status, _responseText, _headers, result500);

    } else if (status === 404) {
        const _responseText = response.data;
        let result404: any = null;
        let resultData404  = _responseText;
        result404 = Types.initErrorResponse(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.initReportDto(resultData200);
        return Promise.resolve<Types.ReportDto>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.ReportDto>(null as any);
}

/**
 * Получить отчет о практике
 * @param practiceId Идентификатор практики
 * @return OK
 */
export function getPracticeReport(practiceId: string, config?: AxiosRequestConfig | undefined): Promise<Types.ReportDto> {
    let url_ = getBaseUrl() + "/api/v1/report?";
      if (practiceId === undefined || practiceId === null)
        throw new Error("The parameter 'practiceId' must be defined and cannot be null.");
      else
        url_ += "practiceId=" + encodeURIComponent("" + practiceId) + "&";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigGetPracticeReport,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigGetPracticeReport?.headers,
            "Accept": "*/*",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processGetPracticeReport(_response);
    });
}

function processGetPracticeReport(response: AxiosResponse): Promise<Types.ReportDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 409) {
        const _responseText = response.data;
        let result409: any = null;
        let resultData409  = _responseText;
        result409 = Types.initErrorResponse(resultData409);
        return throwException("Conflict", status, _responseText, _headers, result409);

    } else if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400  = _responseText;
        result400 = Types.initErrorResponse(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);

    } else if (status === 500) {
        const _responseText = response.data;
        let result500: any = null;
        let resultData500  = _responseText;
        result500 = Types.initErrorResponse(resultData500);
        return throwException("Internal Server Error", status, _responseText, _headers, result500);

    } else if (status === 404) {
        const _responseText = response.data;
        let result404: any = null;
        let resultData404  = _responseText;
        result404 = Types.initErrorResponse(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.initReportDto(resultData200);
        return Promise.resolve<Types.ReportDto>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.ReportDto>(null as any);
}
let _requestConfigUnattachFileFromReport: Partial<AxiosRequestConfig> | null;
export function getUnattachFileFromReportRequestConfig() {
  return _requestConfigUnattachFileFromReport;
}
export function setUnattachFileFromReportRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigUnattachFileFromReport = value;
}
export function patchUnattachFileFromReportRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigUnattachFileFromReport = patch(_requestConfigUnattachFileFromReport ?? {});
}

let _requestConfigAttachFileToReport: Partial<AxiosRequestConfig> | null;
export function getAttachFileToReportRequestConfig() {
  return _requestConfigAttachFileToReport;
}
export function setAttachFileToReportRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigAttachFileToReport = value;
}
export function patchAttachFileToReportRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigAttachFileToReport = patch(_requestConfigAttachFileToReport ?? {});
}

let _requestConfigSetGrade: Partial<AxiosRequestConfig> | null;
export function getSetGradeRequestConfig() {
  return _requestConfigSetGrade;
}
export function setSetGradeRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigSetGrade = value;
}
export function patchSetGradeRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigSetGrade = patch(_requestConfigSetGrade ?? {});
}

let _requestConfigGetPracticeReport: Partial<AxiosRequestConfig> | null;
export function getGetPracticeReportRequestConfig() {
  return _requestConfigGetPracticeReport;
}
export function setGetPracticeReportRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigGetPracticeReport = value;
}
export function patchGetPracticeReportRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigGetPracticeReport = patch(_requestConfigGetPracticeReport ?? {});
}