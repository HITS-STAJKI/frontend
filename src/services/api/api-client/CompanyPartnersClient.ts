//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
//@ts-nocheck
import * as Types from '../api-client.types';
import type { AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

import { throwException, isAxiosError } from '../api-client.types';
import { getAxios, getBaseUrl } from './helpers';

/**
 * Получение подробной информации о партнере
 * @param partnerId Идентификатор партнера
 * @return OK
 */
export function getPartnerInfo(partnerId: string, config?: AxiosRequestConfig | undefined): Promise<Types.CompanyPartnerDto> {
    let url_ = getBaseUrl() + "/api/v1/partner/{partnerId}";
    if (partnerId === undefined || partnerId === null)
        throw new Error("The parameter 'partnerId' must be defined.");
    url_ = url_.replace("{partnerId}", encodeURIComponent("" + partnerId));
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigGetPartnerInfo,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigGetPartnerInfo?.headers,
            "Accept": "*/*",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processGetPartnerInfo(_response);
    });
}

function processGetPartnerInfo(response: AxiosResponse): Promise<Types.CompanyPartnerDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 409) {
        const _responseText = response.data;
        let result409: any = null;
        let resultData409 = _responseText;
        result409 = Types.initErrorResponse(resultData409);
        return throwException("Conflict", status, _responseText, _headers, result409);

    } else if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400 = _responseText;
        result400 = Types.initErrorResponse(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);

    } else if (status === 500) {
        const _responseText = response.data;
        let result500: any = null;
        let resultData500 = _responseText;
        result500 = Types.initErrorResponse(resultData500);
        return throwException("Internal Server Error", status, _responseText, _headers, result500);

    } else if (status === 401) {
        const _responseText = response.data;
        let result401: any = null;
        let resultData401 = _responseText;
        result401 = Types.initErrorResponse(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);

    } else if (status === 404) {
        const _responseText = response.data;
        let result404: any = null;
        let resultData404 = _responseText;
        result404 = Types.initErrorResponse(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200 = _responseText;
        result200 = Types.initCompanyPartnerDto(resultData200);
        return Promise.resolve<Types.CompanyPartnerDto>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.CompanyPartnerDto>(null as any);
}

/**
 * Обновление информации о партнере
 * @param partnerId Идентификатор партнера
 * @return OK
 */
export function updatePartnerInfo(partnerId: string, body: Types.UpdateCompanyPartnerDto, config?: AxiosRequestConfig | undefined): Promise<Types.CompanyPartnerDto> {
    let url_ = getBaseUrl() + "/api/v1/partner/{partnerId}";
    if (partnerId === undefined || partnerId === null)
        throw new Error("The parameter 'partnerId' must be defined.");
    url_ = url_.replace("{partnerId}", encodeURIComponent("" + partnerId));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = Types.serializeUpdateCompanyPartnerDto(body);

    let options_: AxiosRequestConfig = {
        ..._requestConfigUpdatePartnerInfo,
        ...config,
        data: content_,
        method: "PUT",
        url: url_,
        headers: {
            ..._requestConfigUpdatePartnerInfo?.headers,
            "Content-Type": "application/json",
            "Accept": "*/*",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processUpdatePartnerInfo(_response);
    });
}

function processUpdatePartnerInfo(response: AxiosResponse): Promise<Types.CompanyPartnerDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 409) {
        const _responseText = response.data;
        let result409: any = null;
        let resultData409 = _responseText;
        result409 = Types.initErrorResponse(resultData409);
        return throwException("Conflict", status, _responseText, _headers, result409);

    } else if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400 = _responseText;
        result400 = Types.initErrorResponse(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);

    } else if (status === 500) {
        const _responseText = response.data;
        let result500: any = null;
        let resultData500 = _responseText;
        result500 = Types.initErrorResponse(resultData500);
        return throwException("Internal Server Error", status, _responseText, _headers, result500);

    } else if (status === 401) {
        const _responseText = response.data;
        let result401: any = null;
        let resultData401 = _responseText;
        result401 = Types.initErrorResponse(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);

    } else if (status === 404) {
        const _responseText = response.data;
        let result404: any = null;
        let resultData404 = _responseText;
        result404 = Types.initErrorResponse(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200 = _responseText;
        result200 = Types.initCompanyPartnerDto(resultData200);
        return Promise.resolve<Types.CompanyPartnerDto>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.CompanyPartnerDto>(null as any);
}

/**
 * Удаление партнера
 * @param partnerId Идентификатор партнера
 * @return OK
 */
export function deletePartner(partnerId: string, config?: AxiosRequestConfig | undefined): Promise<Types.Response> {
    let url_ = getBaseUrl() + "/api/v1/partner/{partnerId}";
    if (partnerId === undefined || partnerId === null)
        throw new Error("The parameter 'partnerId' must be defined.");
    url_ = url_.replace("{partnerId}", encodeURIComponent("" + partnerId));
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigDeletePartner,
        ...config,
        method: "DELETE",
        url: url_,
        headers: {
            ..._requestConfigDeletePartner?.headers,
            "Accept": "*/*",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processDeletePartner(_response);
    });
}

function processDeletePartner(response: AxiosResponse): Promise<Types.Response> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 409) {
        const _responseText = response.data;
        let result409: any = null;
        let resultData409 = _responseText;
        result409 = Types.initErrorResponse(resultData409);
        return throwException("Conflict", status, _responseText, _headers, result409);

    } else if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400 = _responseText;
        result400 = Types.initErrorResponse(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);

    } else if (status === 500) {
        const _responseText = response.data;
        let result500: any = null;
        let resultData500 = _responseText;
        result500 = Types.initErrorResponse(resultData500);
        return throwException("Internal Server Error", status, _responseText, _headers, result500);

    } else if (status === 401) {
        const _responseText = response.data;
        let result401: any = null;
        let resultData401 = _responseText;
        result401 = Types.initErrorResponse(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);

    } else if (status === 404) {
        const _responseText = response.data;
        let result404: any = null;
        let resultData404 = _responseText;
        result404 = Types.initErrorResponse(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200 = _responseText;
        result200 = Types.initResponse(resultData200);
        return Promise.resolve<Types.Response>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.Response>(null as any);
}

/**
 * Создание партнера
 * @return OK
 */
export function createPartner(body: Types.CreateCompanyPartnerDto, config?: AxiosRequestConfig | undefined): Promise<Types.CompanyPartnerDto> {
    let url_ = getBaseUrl() + "/api/v1/partner";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = Types.serializeCreateCompanyPartnerDto(body);

    let options_: AxiosRequestConfig = {
        ..._requestConfigCreatePartner,
        ...config,
        data: content_,
        method: "POST",
        url: url_,
        headers: {
            ..._requestConfigCreatePartner?.headers,
            "Content-Type": "application/json",
            "Accept": "*/*",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processCreatePartner(_response);
    });
}

function processCreatePartner(response: AxiosResponse): Promise<Types.CompanyPartnerDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 409) {
        const _responseText = response.data;
        let result409: any = null;
        let resultData409 = _responseText;
        result409 = Types.initErrorResponse(resultData409);
        return throwException("Conflict", status, _responseText, _headers, result409);

    } else if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400 = _responseText;
        result400 = Types.initErrorResponse(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);

    } else if (status === 500) {
        const _responseText = response.data;
        let result500: any = null;
        let resultData500 = _responseText;
        result500 = Types.initErrorResponse(resultData500);
        return throwException("Internal Server Error", status, _responseText, _headers, result500);

    } else if (status === 401) {
        const _responseText = response.data;
        let result401: any = null;
        let resultData401 = _responseText;
        result401 = Types.initErrorResponse(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);

    } else if (status === 404) {
        const _responseText = response.data;
        let result404: any = null;
        let resultData404 = _responseText;
        result404 = Types.initErrorResponse(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200 = _responseText;
        result200 = Types.initCompanyPartnerDto(resultData200);
        return Promise.resolve<Types.CompanyPartnerDto>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.CompanyPartnerDto>(null as any);
}

/**
 * Получение списка партнеров хитса
 * @param id (optional) Идентификатор компании
 * @param name (optional) Название компании (разрешается частичное совпадение)
 * @param isNew (optional) Только новые компании (те, в которых никто не проходит практику)
 * @param page (optional) Zero-based page index (0..N)
 * @param size (optional) The size of the page to be returned
 * @param sort (optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
 * @return OK
 */
export function getPartners(id?: string | undefined, name?: string | undefined, isNew?: boolean | undefined, page?: number | undefined, size?: number | undefined, sort?: string[] | undefined, config?: AxiosRequestConfig | undefined): Promise<Types.PagedListDtoShortCompanyPartnerDto> {
    let url_ = getBaseUrl() + "/api/v1/partner/list?";
    if (id === null)
        throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
        url_ += "id=" + encodeURIComponent("" + id) + "&";
    if (name === null)
        throw new Error("The parameter 'name' cannot be null.");
    else if (name !== undefined)
        url_ += "name=" + encodeURIComponent("" + name) + "&";
    if (isNew === null)
        throw new Error("The parameter 'isNew' cannot be null.");
    else if (isNew !== undefined)
        url_ += "isNew=" + encodeURIComponent("" + isNew) + "&";
    if (page === null)
        throw new Error("The parameter 'page' cannot be null.");
    else if (page !== undefined)
        url_ += "page=" + encodeURIComponent("" + page) + "&";
    if (size === null)
        throw new Error("The parameter 'size' cannot be null.");
    else if (size !== undefined)
        url_ += "size=" + encodeURIComponent("" + size) + "&";
    if (sort === null)
        throw new Error("The parameter 'sort' cannot be null.");
    else if (sort !== undefined)
        sort && sort.forEach(item => { url_ += "sort=" + encodeURIComponent("" + item) + "&"; });
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigGetPartners,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigGetPartners?.headers,
            "Accept": "*/*",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processGetPartners(_response);
    });
}

function processGetPartners(response: AxiosResponse): Promise<Types.PagedListDtoShortCompanyPartnerDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 409) {
        const _responseText = response.data;
        let result409: any = null;
        let resultData409 = _responseText;
        result409 = Types.initErrorResponse(resultData409);
        return throwException("Conflict", status, _responseText, _headers, result409);

    } else if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400 = _responseText;
        result400 = Types.initErrorResponse(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);

    } else if (status === 500) {
        const _responseText = response.data;
        let result500: any = null;
        let resultData500 = _responseText;
        result500 = Types.initErrorResponse(resultData500);
        return throwException("Internal Server Error", status, _responseText, _headers, result500);

    } else if (status === 401) {
        const _responseText = response.data;
        let result401: any = null;
        let resultData401 = _responseText;
        result401 = Types.initErrorResponse(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);

    } else if (status === 404) {
        const _responseText = response.data;
        let result404: any = null;
        let resultData404 = _responseText;
        result404 = Types.initErrorResponse(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200 = _responseText;
        result200 = Types.initPagedListDtoShortCompanyPartnerDto(resultData200);
        return Promise.resolve<Types.PagedListDtoShortCompanyPartnerDto>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.PagedListDtoShortCompanyPartnerDto>(null as any);
}
let _requestConfigGetPartnerInfo: Partial<AxiosRequestConfig> | null;
export function getGetPartnerInfoRequestConfig() {
    return _requestConfigGetPartnerInfo;
}
export function setGetPartnerInfoRequestConfig(value: Partial<AxiosRequestConfig>) {
    _requestConfigGetPartnerInfo = value;
}
export function patchGetPartnerInfoRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
    _requestConfigGetPartnerInfo = patch(_requestConfigGetPartnerInfo ?? {});
}

let _requestConfigUpdatePartnerInfo: Partial<AxiosRequestConfig> | null;
export function getUpdatePartnerInfoRequestConfig() {
    return _requestConfigUpdatePartnerInfo;
}
export function setUpdatePartnerInfoRequestConfig(value: Partial<AxiosRequestConfig>) {
    _requestConfigUpdatePartnerInfo = value;
}
export function patchUpdatePartnerInfoRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
    _requestConfigUpdatePartnerInfo = patch(_requestConfigUpdatePartnerInfo ?? {});
}

let _requestConfigDeletePartner: Partial<AxiosRequestConfig> | null;
export function getDeletePartnerRequestConfig() {
    return _requestConfigDeletePartner;
}
export function setDeletePartnerRequestConfig(value: Partial<AxiosRequestConfig>) {
    _requestConfigDeletePartner = value;
}
export function patchDeletePartnerRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
    _requestConfigDeletePartner = patch(_requestConfigDeletePartner ?? {});
}

let _requestConfigCreatePartner: Partial<AxiosRequestConfig> | null;
export function getCreatePartnerRequestConfig() {
    return _requestConfigCreatePartner;
}
export function setCreatePartnerRequestConfig(value: Partial<AxiosRequestConfig>) {
    _requestConfigCreatePartner = value;
}
export function patchCreatePartnerRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
    _requestConfigCreatePartner = patch(_requestConfigCreatePartner ?? {});
}

let _requestConfigGetPartners: Partial<AxiosRequestConfig> | null;
export function getGetPartnersRequestConfig() {
    return _requestConfigGetPartners;
}
export function setGetPartnersRequestConfig(value: Partial<AxiosRequestConfig>) {
    _requestConfigGetPartners = value;
}
export function patchGetPartnersRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
    _requestConfigGetPartners = patch(_requestConfigGetPartners ?? {});
}