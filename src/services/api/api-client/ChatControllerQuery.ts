//@ts-nocheck
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../api-client.types';
import { useQuery, useMutation } from '@tanstack/react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from '@tanstack/react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import * as Client from './ChatControllerClient'
export { Client };
import type { AxiosRequestConfig } from 'axios';


export function sendMessagesUrl(): string {
  let url_ = getBaseUrl() + "/api/v1/chats/studentMessages";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function sendMessagesMutationKey(): MutationKey {
  return trimArrayEnd([
    'ChatControllerClient',
    'sendMessages',
  ]);
}

/**
 * Отправить сообщения определённым студентам
 * @return OK
 */
export function useSendMessagesMutation<TContext>(options?: Omit<UseMutationOptions<Types.Response, unknown, Types.SendMessageToStudentsRequest, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.Response, unknown, Types.SendMessageToStudentsRequest, TContext> {
  const key = sendMessagesMutationKey();

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useMutation({
    ...options,
    mutationFn: (body: Types.SendMessageToStudentsRequest) => Client.sendMessages(body),
    mutationKey: key,
  });
}

export function getMyChatInfoUrl(): string {
  let url_ = getBaseUrl() + "/api/v1/chats/my";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getMyChatInfoDefaultOptions: Omit<UseQueryOptions<Types.ChatInfoDto, unknown, Types.ChatInfoDto>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<Types.ChatInfoDto, unknown, Types.ChatInfoDto>, 'queryFn'>> = {
};
export function getGetMyChatInfoDefaultOptions() {
  return getMyChatInfoDefaultOptions;
};
export function setGetMyChatInfoDefaultOptions(options: typeof getMyChatInfoDefaultOptions) {
  getMyChatInfoDefaultOptions = options;
}

export function getMyChatInfoQueryKey(): QueryKey;
export function getMyChatInfoQueryKey(...params: any[]): QueryKey {
  return trimArrayEnd([
    'ChatControllerClient',
    'getMyChatInfo',
  ]);
}
export function __getMyChatInfo(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.getMyChatInfo(
    axiosConfig);
}

/**
 * Получить информацию о своем чате (для студента)
 * @return OK
 */
export function useGetMyChatInfoQuery<TSelectData = Types.ChatInfoDto, TError = unknown>(options?: Omit<UseQueryOptions<Types.ChatInfoDto, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useGetMyChatInfoQuery<TSelectData = Types.ChatInfoDto, TError = unknown>(...params: any[]): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.ChatInfoDto, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig | undefined = undefined;


  options = params[0] as any;
  axiosConfig = params[1] as any;

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.ChatInfoDto, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __getMyChatInfo(context, axiosConfig) : __getMyChatInfo,
    queryKey: getMyChatInfoQueryKey(),
    ...getMyChatInfoDefaultOptions as unknown as Omit<UseQueryOptions<Types.ChatInfoDto, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Получить информацию о своем чате (для студента)
 * @return OK
 */
export function setGetMyChatInfoData(queryClient: QueryClient, updater: (data: Types.ChatInfoDto | undefined) => Types.ChatInfoDto,) {
  queryClient.setQueryData(getMyChatInfoQueryKey(),
    updater
  );
}

/**
 * Получить информацию о своем чате (для студента)
 * @return OK
 */
export function setGetMyChatInfoDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.ChatInfoDto | undefined) => Types.ChatInfoDto) {
  queryClient.setQueryData(queryKey, updater);
}