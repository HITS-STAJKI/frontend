//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../api-client.types';
import type { AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

import { throwException, isAxiosError } from '../api-client.types';
import { getAxios, getBaseUrl } from './helpers';

/**
 * Отправка студента в академ
 * @param studentId ID студента
 * @return OK
 */
export function sendStudentToAcadem(studentId: string, config?: AxiosRequestConfig | undefined): Promise<Types.StudentDto> {
    let url_ = getBaseUrl() + "/api/v1/student/{studentId}/to-academ";
    if (studentId === undefined || studentId === null)
      throw new Error("The parameter 'studentId' must be defined.");
    url_ = url_.replace("{studentId}", encodeURIComponent("" + studentId));
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigSendStudentToAcadem,
        ...config,
        method: "PUT",
        url: url_,
        headers: {
            ..._requestConfigSendStudentToAcadem?.headers,
            "Accept": "*/*",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processSendStudentToAcadem(_response);
    });
}

function processSendStudentToAcadem(response: AxiosResponse): Promise<Types.StudentDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 409) {
        const _responseText = response.data;
        let result409: any = null;
        let resultData409  = _responseText;
        result409 = Types.initErrorResponse(resultData409);
        return throwException("Conflict", status, _responseText, _headers, result409);

    } else if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400  = _responseText;
        result400 = Types.initErrorResponse(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);

    } else if (status === 500) {
        const _responseText = response.data;
        let result500: any = null;
        let resultData500  = _responseText;
        result500 = Types.initErrorResponse(resultData500);
        return throwException("Internal Server Error", status, _responseText, _headers, result500);

    } else if (status === 401) {
        const _responseText = response.data;
        let result401: any = null;
        let resultData401  = _responseText;
        result401 = Types.initErrorResponse(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);

    } else if (status === 404) {
        const _responseText = response.data;
        let result404: any = null;
        let resultData404  = _responseText;
        result404 = Types.initErrorResponse(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.initStudentDto(resultData200);
        return Promise.resolve<Types.StudentDto>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.StudentDto>(null as any);
}

/**
 * Возвращение студента из академа
 * @param studentId ID студента
 * @return OK
 */
export function returnStudentFromAcadem(studentId: string, body: Types.ReturnFromAcademDto, config?: AxiosRequestConfig | undefined): Promise<Types.StudentDto> {
    let url_ = getBaseUrl() + "/api/v1/student/{studentId}/from-academ";
    if (studentId === undefined || studentId === null)
      throw new Error("The parameter 'studentId' must be defined.");
    url_ = url_.replace("{studentId}", encodeURIComponent("" + studentId));
      url_ = url_.replace(/[?&]$/, "");

    const content_ = Types.serializeReturnFromAcademDto(body);

    let options_: AxiosRequestConfig = {
        ..._requestConfigReturnStudentFromAcadem,
        ...config,
        data: content_,
        method: "PUT",
        url: url_,
        headers: {
            ..._requestConfigReturnStudentFromAcadem?.headers,
            "Content-Type": "application/json",
            "Accept": "*/*",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processReturnStudentFromAcadem(_response);
    });
}

function processReturnStudentFromAcadem(response: AxiosResponse): Promise<Types.StudentDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 409) {
        const _responseText = response.data;
        let result409: any = null;
        let resultData409  = _responseText;
        result409 = Types.initErrorResponse(resultData409);
        return throwException("Conflict", status, _responseText, _headers, result409);

    } else if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400  = _responseText;
        result400 = Types.initErrorResponse(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);

    } else if (status === 500) {
        const _responseText = response.data;
        let result500: any = null;
        let resultData500  = _responseText;
        result500 = Types.initErrorResponse(resultData500);
        return throwException("Internal Server Error", status, _responseText, _headers, result500);

    } else if (status === 401) {
        const _responseText = response.data;
        let result401: any = null;
        let resultData401  = _responseText;
        result401 = Types.initErrorResponse(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);

    } else if (status === 404) {
        const _responseText = response.data;
        let result404: any = null;
        let resultData404  = _responseText;
        result404 = Types.initErrorResponse(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.initStudentDto(resultData200);
        return Promise.resolve<Types.StudentDto>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.StudentDto>(null as any);
}

/**
 * Обновление информации о студенте
 * @param id ID студента
 * @return OK
 */
export function updateStudent(id: string, body: Types.StudentEditDto, config?: AxiosRequestConfig | undefined): Promise<Types.StudentDto> {
    let url_ = getBaseUrl() + "/api/v1/student/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
      url_ = url_.replace(/[?&]$/, "");

    const content_ = Types.serializeStudentEditDto(body);

    let options_: AxiosRequestConfig = {
        ..._requestConfigUpdateStudent,
        ...config,
        data: content_,
        method: "PUT",
        url: url_,
        headers: {
            ..._requestConfigUpdateStudent?.headers,
            "Content-Type": "application/json",
            "Accept": "*/*",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processUpdateStudent(_response);
    });
}

function processUpdateStudent(response: AxiosResponse): Promise<Types.StudentDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 409) {
        const _responseText = response.data;
        let result409: any = null;
        let resultData409  = _responseText;
        result409 = Types.initErrorResponse(resultData409);
        return throwException("Conflict", status, _responseText, _headers, result409);

    } else if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400  = _responseText;
        result400 = Types.initErrorResponse(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);

    } else if (status === 500) {
        const _responseText = response.data;
        let result500: any = null;
        let resultData500  = _responseText;
        result500 = Types.initErrorResponse(resultData500);
        return throwException("Internal Server Error", status, _responseText, _headers, result500);

    } else if (status === 401) {
        const _responseText = response.data;
        let result401: any = null;
        let resultData401  = _responseText;
        result401 = Types.initErrorResponse(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);

    } else if (status === 404) {
        const _responseText = response.data;
        let result404: any = null;
        let resultData404  = _responseText;
        result404 = Types.initErrorResponse(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.initStudentDto(resultData200);
        return Promise.resolve<Types.StudentDto>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.StudentDto>(null as any);
}

/**
 * Создание студента для текущего пользователя
 * @return OK
 */
export function createStudentForCurrentUser(body: Types.StudentCreateDto, config?: AxiosRequestConfig | undefined): Promise<Types.StudentDto> {
    let url_ = getBaseUrl() + "/api/v1/student";
      url_ = url_.replace(/[?&]$/, "");

    const content_ = Types.serializeStudentCreateDto(body);

    let options_: AxiosRequestConfig = {
        ..._requestConfigCreateStudentForCurrentUser,
        ...config,
        data: content_,
        method: "POST",
        url: url_,
        headers: {
            ..._requestConfigCreateStudentForCurrentUser?.headers,
            "Content-Type": "application/json",
            "Accept": "*/*",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processCreateStudentForCurrentUser(_response);
    });
}

function processCreateStudentForCurrentUser(response: AxiosResponse): Promise<Types.StudentDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 409) {
        const _responseText = response.data;
        let result409: any = null;
        let resultData409  = _responseText;
        result409 = Types.initErrorResponse(resultData409);
        return throwException("Conflict", status, _responseText, _headers, result409);

    } else if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400  = _responseText;
        result400 = Types.initErrorResponse(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);

    } else if (status === 500) {
        const _responseText = response.data;
        let result500: any = null;
        let resultData500  = _responseText;
        result500 = Types.initErrorResponse(resultData500);
        return throwException("Internal Server Error", status, _responseText, _headers, result500);

    } else if (status === 401) {
        const _responseText = response.data;
        let result401: any = null;
        let resultData401  = _responseText;
        result401 = Types.initErrorResponse(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);

    } else if (status === 404) {
        const _responseText = response.data;
        let result404: any = null;
        let resultData404  = _responseText;
        result404 = Types.initErrorResponse(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.initStudentDto(resultData200);
        return Promise.resolve<Types.StudentDto>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.StudentDto>(null as any);
}

/**
 * Создание студента
 * @param userId ID пользователя
 * @return OK
 */
export function createStudent(userId: string, body: Types.StudentCreateDto, config?: AxiosRequestConfig | undefined): Promise<Types.StudentDto> {
    let url_ = getBaseUrl() + "/api/v1/student/user/{userId}";
    if (userId === undefined || userId === null)
      throw new Error("The parameter 'userId' must be defined.");
    url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
      url_ = url_.replace(/[?&]$/, "");

    const content_ = Types.serializeStudentCreateDto(body);

    let options_: AxiosRequestConfig = {
        ..._requestConfigCreateStudent,
        ...config,
        data: content_,
        method: "POST",
        url: url_,
        headers: {
            ..._requestConfigCreateStudent?.headers,
            "Content-Type": "application/json",
            "Accept": "*/*",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processCreateStudent(_response);
    });
}

function processCreateStudent(response: AxiosResponse): Promise<Types.StudentDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 409) {
        const _responseText = response.data;
        let result409: any = null;
        let resultData409  = _responseText;
        result409 = Types.initErrorResponse(resultData409);
        return throwException("Conflict", status, _responseText, _headers, result409);

    } else if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400  = _responseText;
        result400 = Types.initErrorResponse(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);

    } else if (status === 500) {
        const _responseText = response.data;
        let result500: any = null;
        let resultData500  = _responseText;
        result500 = Types.initErrorResponse(resultData500);
        return throwException("Internal Server Error", status, _responseText, _headers, result500);

    } else if (status === 401) {
        const _responseText = response.data;
        let result401: any = null;
        let resultData401  = _responseText;
        result401 = Types.initErrorResponse(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);

    } else if (status === 404) {
        const _responseText = response.data;
        let result404: any = null;
        let resultData404  = _responseText;
        result404 = Types.initErrorResponse(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.initStudentDto(resultData200);
        return Promise.resolve<Types.StudentDto>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.StudentDto>(null as any);
}

/**
 * Получение информации о студентах по id
 * @return OK
 */
export function getStudentsByIds(body: string[], config?: AxiosRequestConfig | undefined): Promise<Types.StudentDto[]> {
    let url_ = getBaseUrl() + "/api/v1/student/list/ids";
      url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: AxiosRequestConfig = {
        ..._requestConfigGetStudentsByIds,
        ...config,
        data: content_,
        method: "POST",
        url: url_,
        headers: {
            ..._requestConfigGetStudentsByIds?.headers,
            "Content-Type": "application/json",
            "Accept": "*/*",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processGetStudentsByIds(_response);
    });
}

function processGetStudentsByIds(response: AxiosResponse): Promise<Types.StudentDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 409) {
        const _responseText = response.data;
        let result409: any = null;
        let resultData409  = _responseText;
        result409 = Types.initErrorResponse(resultData409);
        return throwException("Conflict", status, _responseText, _headers, result409);

    } else if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400  = _responseText;
        result400 = Types.initErrorResponse(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);

    } else if (status === 500) {
        const _responseText = response.data;
        let result500: any = null;
        let resultData500  = _responseText;
        result500 = Types.initErrorResponse(resultData500);
        return throwException("Internal Server Error", status, _responseText, _headers, result500);

    } else if (status === 401) {
        const _responseText = response.data;
        let result401: any = null;
        let resultData401  = _responseText;
        result401 = Types.initErrorResponse(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);

    } else if (status === 404) {
        const _responseText = response.data;
        let result404: any = null;
        let resultData404  = _responseText;
        result404 = Types.initErrorResponse(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        if (Array.isArray(resultData200)) {
              result200 = resultData200.map(item => 
                Types.initStudentDto(item)
              );
            }
        return Promise.resolve<Types.StudentDto[]>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.StudentDto[]>(null as any);
}

/**
 * Импорт студентов из Excel-файла
 * @param file (optional) 
 * @return OK
 */
export function importStudents(file?: Types.FileParameter | undefined, config?: AxiosRequestConfig | undefined): Promise<Types.FileResponse> {
    let url_ = getBaseUrl() + "/api/v1/student/import";
      url_ = url_.replace(/[?&]$/, "");

    const content_ = new FormData();
    if (file === null || file === undefined)
        throw new Error("The parameter 'file' cannot be null.");
    else
        content_.append("file", file.data, file.fileName ? file.fileName : "file");

    let options_: AxiosRequestConfig = {
        responseType: "blob",
        ..._requestConfigImportStudents,
        ...config,
        data: content_,
        method: "POST",
        url: url_,
        headers: {
            ..._requestConfigImportStudents?.headers,
            "Accept": "*/*",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processImportStudents(_response);
    });
}

function processImportStudents(response: AxiosResponse): Promise<Types.FileResponse> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 409) {
        const _responseText = response.data;
        let result409: any = null;
        let resultData409  = _responseText;
        result409 = Types.initErrorResponse(resultData409);
        return throwException("Conflict", status, _responseText, _headers, result409);

    } else if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400  = _responseText;
        result400 = Types.initErrorResponse(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);

    } else if (status === 500) {
        const _responseText = response.data;
        let result500: any = null;
        let resultData500  = _responseText;
        result500 = Types.initErrorResponse(resultData500);
        return throwException("Internal Server Error", status, _responseText, _headers, result500);

    } else if (status === 401) {
        const _responseText = response.data;
        let result401: any = null;
        let resultData401  = _responseText;
        result401 = Types.initErrorResponse(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);

    } else if (status === 404) {
        const _responseText = response.data;
        let result404: any = null;
        let resultData404  = _responseText;
        result404 = Types.initErrorResponse(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);

    } else if (status === 200 || status === 206) {
        const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
        let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
        let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
        if (fileName) {
            fileName = decodeURIComponent(fileName);
        } else {
            fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
        }
        return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data], { type: response.headers["content-type"] }), headers: _headers });
    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.FileResponse>(null as any);
}

/**
 * Получение всех студентов
 * @param page (optional) Zero-based page index (0..N)
 * @param size (optional) The size of the page to be returned
 * @param sort (optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
 * @param fullName (optional) ФИО
 * @param isAcadem (optional) Статус нахождения студента в академе
 * @param isGraduated (optional) Статус выпуска студента
 * @param groupIds (optional) Идентификаторы потоков
 * @param companyIds (optional) Идентификаторы компаний-партнеров
 * @param isOnPractice (optional) Находятся на практике/не находятся
 * @param hasPracticeRequest (optional) Наличие заявки на практику
 * @param hasInterviews (optional) Приступили/не приступили к собеседованиям
 * @param stackIds (optional) Идентификаторы стеков
 * @param lastLogin (optional) Время последнего захода в систему
 * @return OK
 */
export function getAllStudents(page?: number | undefined, size?: number | undefined, sort?: string[] | undefined, fullName?: string | undefined, isAcadem?: boolean | undefined, isGraduated?: boolean | undefined, groupIds?: string[] | undefined, companyIds?: string[] | undefined, isOnPractice?: boolean | undefined, hasPracticeRequest?: boolean | undefined, hasInterviews?: boolean | undefined, stackIds?: string[] | undefined, lastLogin?: Date | undefined, config?: AxiosRequestConfig | undefined): Promise<Types.PagedListDtoStudentDto> {
    let url_ = getBaseUrl() + "/api/v1/student/list?";
    if (page === null)
        throw new Error("The parameter 'page' cannot be null.");
    else if (page !== undefined)
        url_ += "page=" + encodeURIComponent("" + page) + "&";
    if (size === null)
        throw new Error("The parameter 'size' cannot be null.");
    else if (size !== undefined)
        url_ += "size=" + encodeURIComponent("" + size) + "&";
    if (sort === null)
        throw new Error("The parameter 'sort' cannot be null.");
    else if (sort !== undefined)
        sort && sort.forEach(item => { url_ += "sort=" + encodeURIComponent("" + item) + "&"; });
    if (fullName === null)
        throw new Error("The parameter 'fullName' cannot be null.");
    else if (fullName !== undefined)
        url_ += "fullName=" + encodeURIComponent("" + fullName) + "&";
    if (isAcadem === null)
        throw new Error("The parameter 'isAcadem' cannot be null.");
    else if (isAcadem !== undefined)
        url_ += "isAcadem=" + encodeURIComponent("" + isAcadem) + "&";
    if (isGraduated === null)
        throw new Error("The parameter 'isGraduated' cannot be null.");
    else if (isGraduated !== undefined)
        url_ += "isGraduated=" + encodeURIComponent("" + isGraduated) + "&";
    if (groupIds === null)
        throw new Error("The parameter 'groupIds' cannot be null.");
    else if (groupIds !== undefined)
        groupIds && groupIds.forEach(item => { url_ += "groupIds=" + encodeURIComponent("" + item) + "&"; });
    if (companyIds === null)
        throw new Error("The parameter 'companyIds' cannot be null.");
    else if (companyIds !== undefined)
        companyIds && companyIds.forEach(item => { url_ += "companyIds=" + encodeURIComponent("" + item) + "&"; });
    if (isOnPractice === null)
        throw new Error("The parameter 'isOnPractice' cannot be null.");
    else if (isOnPractice !== undefined)
        url_ += "isOnPractice=" + encodeURIComponent("" + isOnPractice) + "&";
    if (hasPracticeRequest === null)
        throw new Error("The parameter 'hasPracticeRequest' cannot be null.");
    else if (hasPracticeRequest !== undefined)
        url_ += "hasPracticeRequest=" + encodeURIComponent("" + hasPracticeRequest) + "&";
    if (hasInterviews === null)
        throw new Error("The parameter 'hasInterviews' cannot be null.");
    else if (hasInterviews !== undefined)
        url_ += "hasInterviews=" + encodeURIComponent("" + hasInterviews) + "&";
    if (stackIds === null)
        throw new Error("The parameter 'stackIds' cannot be null.");
    else if (stackIds !== undefined)
        stackIds && stackIds.forEach(item => { url_ += "stackIds=" + encodeURIComponent("" + item) + "&"; });
    if (lastLogin === null)
        throw new Error("The parameter 'lastLogin' cannot be null.");
    else if (lastLogin !== undefined)
        url_ += "lastLogin=" + encodeURIComponent(lastLogin ? "" + lastLogin.toISOString() : "") + "&";
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigGetAllStudents,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigGetAllStudents?.headers,
            "Accept": "*/*",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processGetAllStudents(_response);
    });
}

function processGetAllStudents(response: AxiosResponse): Promise<Types.PagedListDtoStudentDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 409) {
        const _responseText = response.data;
        let result409: any = null;
        let resultData409  = _responseText;
        result409 = Types.initErrorResponse(resultData409);
        return throwException("Conflict", status, _responseText, _headers, result409);

    } else if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400  = _responseText;
        result400 = Types.initErrorResponse(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);

    } else if (status === 500) {
        const _responseText = response.data;
        let result500: any = null;
        let resultData500  = _responseText;
        result500 = Types.initErrorResponse(resultData500);
        return throwException("Internal Server Error", status, _responseText, _headers, result500);

    } else if (status === 401) {
        const _responseText = response.data;
        let result401: any = null;
        let resultData401  = _responseText;
        result401 = Types.initErrorResponse(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);

    } else if (status === 404) {
        const _responseText = response.data;
        let result404: any = null;
        let resultData404  = _responseText;
        result404 = Types.initErrorResponse(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200  = _responseText;
        result200 = Types.initPagedListDtoStudentDto(resultData200);
        return Promise.resolve<Types.PagedListDtoStudentDto>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.PagedListDtoStudentDto>(null as any);
}

/**
 * Экспорт студентов в Excel-файл
 * @param studentIds (optional) 
 * @return OK
 */
export function exportStudents(studentIds?: string[] | undefined, config?: AxiosRequestConfig | undefined): Promise<Types.FileResponse> {
    let url_ = getBaseUrl() + "/api/v1/student/export?";
    if (studentIds === null)
        throw new Error("The parameter 'studentIds' cannot be null.");
    else if (studentIds !== undefined)
        studentIds && studentIds.forEach(item => { url_ += "studentIds=" + encodeURIComponent("" + item) + "&"; });
      url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        responseType: "blob",
        ..._requestConfigExportStudents,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigExportStudents?.headers,
            "Accept": "*/*",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processExportStudents(_response);
    });
}

function processExportStudents(response: AxiosResponse): Promise<Types.FileResponse> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 409) {
        const _responseText = response.data;
        let result409: any = null;
        let resultData409  = _responseText;
        result409 = Types.initErrorResponse(resultData409);
        return throwException("Conflict", status, _responseText, _headers, result409);

    } else if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400  = _responseText;
        result400 = Types.initErrorResponse(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);

    } else if (status === 500) {
        const _responseText = response.data;
        let result500: any = null;
        let resultData500  = _responseText;
        result500 = Types.initErrorResponse(resultData500);
        return throwException("Internal Server Error", status, _responseText, _headers, result500);

    } else if (status === 401) {
        const _responseText = response.data;
        let result401: any = null;
        let resultData401  = _responseText;
        result401 = Types.initErrorResponse(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);

    } else if (status === 404) {
        const _responseText = response.data;
        let result404: any = null;
        let resultData404  = _responseText;
        result404 = Types.initErrorResponse(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);

    } else if (status === 200 || status === 206) {
        const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
        let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
        let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
        if (fileName) {
            fileName = decodeURIComponent(fileName);
        } else {
            fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
        }
        return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data], { type: response.headers["content-type"] }), headers: _headers });
    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.FileResponse>(null as any);
}
let _requestConfigSendStudentToAcadem: Partial<AxiosRequestConfig> | null;
export function getSendStudentToAcademRequestConfig() {
  return _requestConfigSendStudentToAcadem;
}
export function setSendStudentToAcademRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigSendStudentToAcadem = value;
}
export function patchSendStudentToAcademRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigSendStudentToAcadem = patch(_requestConfigSendStudentToAcadem ?? {});
}

let _requestConfigReturnStudentFromAcadem: Partial<AxiosRequestConfig> | null;
export function getReturnStudentFromAcademRequestConfig() {
  return _requestConfigReturnStudentFromAcadem;
}
export function setReturnStudentFromAcademRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigReturnStudentFromAcadem = value;
}
export function patchReturnStudentFromAcademRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigReturnStudentFromAcadem = patch(_requestConfigReturnStudentFromAcadem ?? {});
}

let _requestConfigUpdateStudent: Partial<AxiosRequestConfig> | null;
export function getUpdateStudentRequestConfig() {
  return _requestConfigUpdateStudent;
}
export function setUpdateStudentRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigUpdateStudent = value;
}
export function patchUpdateStudentRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigUpdateStudent = patch(_requestConfigUpdateStudent ?? {});
}

let _requestConfigCreateStudentForCurrentUser: Partial<AxiosRequestConfig> | null;
export function getCreateStudentForCurrentUserRequestConfig() {
  return _requestConfigCreateStudentForCurrentUser;
}
export function setCreateStudentForCurrentUserRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigCreateStudentForCurrentUser = value;
}
export function patchCreateStudentForCurrentUserRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigCreateStudentForCurrentUser = patch(_requestConfigCreateStudentForCurrentUser ?? {});
}

let _requestConfigCreateStudent: Partial<AxiosRequestConfig> | null;
export function getCreateStudentRequestConfig() {
  return _requestConfigCreateStudent;
}
export function setCreateStudentRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigCreateStudent = value;
}
export function patchCreateStudentRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigCreateStudent = patch(_requestConfigCreateStudent ?? {});
}

let _requestConfigGetStudentsByIds: Partial<AxiosRequestConfig> | null;
export function getGetStudentsByIdsRequestConfig() {
  return _requestConfigGetStudentsByIds;
}
export function setGetStudentsByIdsRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigGetStudentsByIds = value;
}
export function patchGetStudentsByIdsRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigGetStudentsByIds = patch(_requestConfigGetStudentsByIds ?? {});
}

let _requestConfigImportStudents: Partial<AxiosRequestConfig> | null;
export function getImportStudentsRequestConfig() {
  return _requestConfigImportStudents;
}
export function setImportStudentsRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigImportStudents = value;
}
export function patchImportStudentsRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigImportStudents = patch(_requestConfigImportStudents ?? {});
}

let _requestConfigGetAllStudents: Partial<AxiosRequestConfig> | null;
export function getGetAllStudentsRequestConfig() {
  return _requestConfigGetAllStudents;
}
export function setGetAllStudentsRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigGetAllStudents = value;
}
export function patchGetAllStudentsRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigGetAllStudents = patch(_requestConfigGetAllStudents ?? {});
}

let _requestConfigExportStudents: Partial<AxiosRequestConfig> | null;
export function getExportStudentsRequestConfig() {
  return _requestConfigExportStudents;
}
export function setExportStudentsRequestConfig(value: Partial<AxiosRequestConfig>) {
  _requestConfigExportStudents = value;
}
export function patchExportStudentsRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
  _requestConfigExportStudents = patch(_requestConfigExportStudents ?? {});
}