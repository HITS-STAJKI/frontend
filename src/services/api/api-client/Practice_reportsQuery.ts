//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
//@ts-nocheck
import * as Types from '../api-client.types';
import { useQuery, useMutation } from '@tanstack/react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from '@tanstack/react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import * as Client from './Practice_reportsClient'
export { Client };
import type { AxiosRequestConfig } from 'axios';

export type UnattachFileFromReportPractice_reportsQueryParameters = {
  reportId: Types.ReportId;
}

export type AttachFileToReportPractice_reportsQueryParameters = {
  reportId: Types.ReportId;
  fileId: string;
}

export type SetGradePractice_reportsQueryParameters = {
  reportId: Types.ReportId;
  grade: number;
}

export type GetPracticeReportPractice_reportsQueryParameters = {
  practiceId: string;
}

export function unattachFileFromReportUrl(reportId: Types.ReportId): string {
  let url_ = getBaseUrl() + "/api/v1/report/file/unattach?";
  if (reportId === undefined || reportId === null)
    throw new Error("The parameter 'reportId' must be defined and cannot be null.");
  else
    url_ += "reportId=" + encodeURIComponent("" + reportId) + "&";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function unattachFileFromReportMutationKey(reportId: Types.ReportId): MutationKey {
  return trimArrayEnd([
    'Practice_reportsClient',
    'unattachFileFromReport',
    reportId as any,
  ]);
}

/**
 * Открепить файл от отчета
 * @param reportId Идентификатор отчета
 * @return OK
 */
export function useUnattachFileFromReportMutation<TContext>(reportId: Types.ReportId, options?: Omit<UseMutationOptions<Types.ReportDto, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.ReportDto, unknown, void, TContext> {
  const key = unattachFileFromReportMutationKey(reportId);

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useMutation({
    ...options,
    mutationFn: () => Client.unattachFileFromReport(reportId),
    mutationKey: key,
  });
}

type UnattachFileFromReport__MutationParameters = UnattachFileFromReportPractice_reportsQueryParameters

/**
 * Открепить файл от отчета
 * @param reportId Идентификатор отчета
 * @return OK
 */
export function useUnattachFileFromReportMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<Types.ReportDto, unknown, UnattachFileFromReport__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: UnattachFileFromReportPractice_reportsQueryParameters }): UseMutationResult<Types.ReportDto, unknown, UnattachFileFromReport__MutationParameters, TContext> {
  const key = unattachFileFromReportMutationKey(options?.parameters?.reportId!);

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useMutation({
    ...options,
    mutationFn: (data: UnattachFileFromReport__MutationParameters) => Client.unattachFileFromReport(data.reportId ?? options?.parameters?.reportId!),
    mutationKey: key,
  });
}

export function attachFileToReportUrl(reportId: Types.ReportId, fileId: string): string {
  let url_ = getBaseUrl() + "/api/v1/report/file/attach?";
  if (reportId === undefined || reportId === null)
    throw new Error("The parameter 'reportId' must be defined and cannot be null.");
  else
    url_ += "reportId=" + encodeURIComponent("" + reportId) + "&";
  if (fileId === undefined || fileId === null)
    throw new Error("The parameter 'fileId' must be defined and cannot be null.");
  else
    url_ += "fileId=" + encodeURIComponent("" + fileId) + "&";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function attachFileToReportMutationKey(reportId: Types.ReportId, fileId: string): MutationKey {
  return trimArrayEnd([
    'Practice_reportsClient',
    'attachFileToReport',
    reportId as any,
    fileId as any,
  ]);
}

/**
 * Прикрепить файл к отчету
 * @param reportId Идентификатор отчета
 * @param fileId Идентификатор файла
 * @return OK
 */
export function useAttachFileToReportMutation<TContext>(reportId: Types.ReportId, fileId: string, options?: Omit<UseMutationOptions<Types.ReportDto, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.ReportDto, unknown, void, TContext> {
  const key = attachFileToReportMutationKey(reportId, fileId);

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useMutation({
    ...options,
    mutationFn: () => Client.attachFileToReport(reportId, fileId),
    mutationKey: key,
  });
}

type AttachFileToReport__MutationParameters = AttachFileToReportPractice_reportsQueryParameters

/**
 * Прикрепить файл к отчету
 * @param reportId Идентификатор отчета
 * @param fileId Идентификатор файла
 * @return OK
 */
export function useAttachFileToReportMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<Types.ReportDto, unknown, AttachFileToReport__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: AttachFileToReportPractice_reportsQueryParameters }): UseMutationResult<Types.ReportDto, unknown, AttachFileToReport__MutationParameters, TContext> {
  const key = attachFileToReportMutationKey(options?.parameters?.reportId!, options?.parameters?.fileId!);

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useMutation({
    ...options,
    mutationFn: (data: AttachFileToReport__MutationParameters) => Client.attachFileToReport(data.reportId ?? options?.parameters?.reportId!, data.fileId ?? options?.parameters?.fileId!),
    mutationKey: key,
  });
}

export function setGradeUrl(reportId: Types.ReportId, grade: number): string {
  let url_ = getBaseUrl() + "/api/v1/report/grade?";
  if (reportId === undefined || reportId === null)
    throw new Error("The parameter 'reportId' must be defined and cannot be null.");
  else
    url_ += "reportId=" + encodeURIComponent("" + reportId) + "&";
  if (grade === undefined || grade === null)
    throw new Error("The parameter 'grade' must be defined and cannot be null.");
  else
    url_ += "grade=" + encodeURIComponent("" + grade) + "&";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function setGradeMutationKey(reportId: Types.ReportId, grade: number): MutationKey {
  return trimArrayEnd([
    'Practice_reportsClient',
    'setGrade',
    reportId as any,
    grade as any,
  ]);
}

/**
 * Изменить оценку отчета о практике
 * @param reportId Идентификатор отчета
 * @param grade Оценка отчета
 * @return OK
 */
export function useSetGradeMutation<TContext>(reportId: Types.ReportId, grade: number, options?: Omit<UseMutationOptions<Types.ReportDto, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.ReportDto, unknown, void, TContext> {
  const key = setGradeMutationKey(reportId, grade);

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useMutation({
    ...options,
    mutationFn: () => Client.setGrade(reportId, grade),
    mutationKey: key,
  });
}

type SetGrade__MutationParameters = SetGradePractice_reportsQueryParameters

/**
 * Изменить оценку отчета о практике
 * @param reportId Идентификатор отчета
 * @param grade Оценка отчета
 * @return OK
 */
export function useSetGradeMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<Types.ReportDto, unknown, SetGrade__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: SetGradePractice_reportsQueryParameters }): UseMutationResult<Types.ReportDto, unknown, SetGrade__MutationParameters, TContext> {
  const key = setGradeMutationKey(options?.parameters?.reportId!, options?.parameters?.grade!);

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useMutation({
    ...options,
    mutationFn: (data: SetGrade__MutationParameters) => Client.setGrade(data.reportId ?? options?.parameters?.reportId!, data.grade ?? options?.parameters?.grade!),
    mutationKey: key,
  });
}

export function getPracticeReportUrl(practiceId: string): string {
  let url_ = getBaseUrl() + "/api/v1/report?";
  if (practiceId === undefined || practiceId === null)
    throw new Error("The parameter 'practiceId' must be defined and cannot be null.");
  else
    url_ += "practiceId=" + encodeURIComponent("" + practiceId) + "&";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getPracticeReportDefaultOptions: Omit<UseQueryOptions<Types.ReportDto, unknown, Types.ReportDto>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<Types.ReportDto, unknown, Types.ReportDto>, 'queryFn'>> = {
};
export function getGetPracticeReportDefaultOptions() {
  return getPracticeReportDefaultOptions;
};
export function setGetPracticeReportDefaultOptions(options: typeof getPracticeReportDefaultOptions) {
  getPracticeReportDefaultOptions = options;
}

export function getPracticeReportQueryKey(practiceId: string): QueryKey;
export function getPracticeReportQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { practiceId, } = params[0] as GetPracticeReportPractice_reportsQueryParameters;

    return trimArrayEnd([
      'Practice_reportsClient',
      'getPracticeReport',
      practiceId as any,
    ]);
  } else {
    return trimArrayEnd([
      'Practice_reportsClient',
      'getPracticeReport',
      ...params
    ]);
  }
}
export function __getPracticeReport(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.getPracticeReport(
    context.queryKey[2] as string, axiosConfig);
}

export function useGetPracticeReportQuery<TSelectData = Types.ReportDto, TError = unknown>(dto: GetPracticeReportPractice_reportsQueryParameters, options?: Omit<UseQueryOptions<Types.ReportDto, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
/**
 * Получить отчет о практике
 * @param practiceId Идентификатор практики
 * @return OK
 */
export function useGetPracticeReportQuery<TSelectData = Types.ReportDto, TError = unknown>(practiceId: string, options?: Omit<UseQueryOptions<Types.ReportDto, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useGetPracticeReportQuery<TSelectData = Types.ReportDto, TError = unknown>(...params: any[]): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.ReportDto, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig | undefined = undefined;
  let practiceId: any = undefined;

  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ practiceId, } = params[0] as GetPracticeReportPractice_reportsQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [practiceId, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.ReportDto, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __getPracticeReport(context, axiosConfig) : __getPracticeReport,
    queryKey: getPracticeReportQueryKey(practiceId),
    ...getPracticeReportDefaultOptions as unknown as Omit<UseQueryOptions<Types.ReportDto, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Получить отчет о практике
 * @param practiceId Идентификатор практики
 * @return OK
 */
export function setGetPracticeReportData(queryClient: QueryClient, updater: (data: Types.ReportDto | undefined) => Types.ReportDto, practiceId: string) {
  queryClient.setQueryData(getPracticeReportQueryKey(practiceId),
    updater
  );
}

/**
 * Получить отчет о практике
 * @param practiceId Идентификатор практики
 * @return OK
 */
export function setGetPracticeReportDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.ReportDto | undefined) => Types.ReportDto) {
  queryClient.setQueryData(queryKey, updater);
}