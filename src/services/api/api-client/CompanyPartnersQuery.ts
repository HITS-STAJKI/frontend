//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../api-client.types';
import { useQuery, useMutation } from '@tanstack/react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from '@tanstack/react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import * as Client from './CompanyPartnersClient'
export { Client };
import type { AxiosRequestConfig } from 'axios';

export type GetPartnerInfoCompanyPartnersQueryParameters = {
  partnerId: string ;
}

export type UpdatePartnerInfoCompanyPartnersQueryParameters = {
  partnerId: string ;
}

export type DeletePartnerCompanyPartnersQueryParameters = {
  partnerId: string ;
}

export type GetPartnersCompanyPartnersQueryParameters = {
  id?: string | undefined ;
  name?: string | undefined ;
  isNew?: boolean | undefined ;
  page?: number | undefined ;
  size?: number | undefined ;
  sort?: string[] | undefined ;
}

export function getPartnerInfoUrl(partnerId: string): string {
  let url_ = getBaseUrl() + "/api/v1/partner/{partnerId}";
if (partnerId === undefined || partnerId === null)
  throw new Error("The parameter 'partnerId' must be defined.");
url_ = url_.replace("{partnerId}", encodeURIComponent("" + partnerId));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getPartnerInfoDefaultOptions: Omit<UseQueryOptions<Types.CompanyPartnerDto, unknown, Types.CompanyPartnerDto>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<Types.CompanyPartnerDto, unknown, Types.CompanyPartnerDto>, 'queryFn'>> = {
};
export function getGetPartnerInfoDefaultOptions() {
  return getPartnerInfoDefaultOptions;
};
export function setGetPartnerInfoDefaultOptions(options: typeof getPartnerInfoDefaultOptions) {
  getPartnerInfoDefaultOptions = options;
}

export function getPartnerInfoQueryKey(partnerId: string): QueryKey;
export function getPartnerInfoQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { partnerId,  } = params[0] as GetPartnerInfoCompanyPartnersQueryParameters;

    return trimArrayEnd([
        'CompanyPartnersClient',
        'getPartnerInfo',
        partnerId as any,
      ]);
  } else {
    return trimArrayEnd([
        'CompanyPartnersClient',
        'getPartnerInfo',
        ...params
      ]);
  }
}
export function __getPartnerInfo(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.getPartnerInfo(
      context.queryKey[2] as string,axiosConfig    );
}

export function useGetPartnerInfoQuery<TSelectData = Types.CompanyPartnerDto, TError = unknown>(dto: GetPartnerInfoCompanyPartnersQueryParameters, options?: Omit<UseQueryOptions<Types.CompanyPartnerDto, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
/**
 * Получение подробной информации о партнере
 * @param partnerId Идентификатор партнера
 * @return OK
 */
export function useGetPartnerInfoQuery<TSelectData = Types.CompanyPartnerDto, TError = unknown>(partnerId: string, options?: Omit<UseQueryOptions<Types.CompanyPartnerDto, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useGetPartnerInfoQuery<TSelectData = Types.CompanyPartnerDto, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.CompanyPartnerDto, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  let partnerId: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ partnerId,  } = params[0] as GetPartnerInfoCompanyPartnersQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [partnerId, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.CompanyPartnerDto, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __getPartnerInfo(context, axiosConfig) : __getPartnerInfo,
    queryKey: getPartnerInfoQueryKey(partnerId),
    ...getPartnerInfoDefaultOptions as unknown as Omit<UseQueryOptions<Types.CompanyPartnerDto, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Получение подробной информации о партнере
 * @param partnerId Идентификатор партнера
 * @return OK
 */
export function setGetPartnerInfoData(queryClient: QueryClient, updater: (data: Types.CompanyPartnerDto | undefined) => Types.CompanyPartnerDto, partnerId: string) {
  queryClient.setQueryData(getPartnerInfoQueryKey(partnerId),
    updater
  );
}

/**
 * Получение подробной информации о партнере
 * @param partnerId Идентификатор партнера
 * @return OK
 */
export function setGetPartnerInfoDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.CompanyPartnerDto | undefined) => Types.CompanyPartnerDto) {
  queryClient.setQueryData(queryKey, updater);
}
    
export function updatePartnerInfoUrl(partnerId: string): string {
  let url_ = getBaseUrl() + "/api/v1/partner/{partnerId}";
if (partnerId === undefined || partnerId === null)
  throw new Error("The parameter 'partnerId' must be defined.");
url_ = url_.replace("{partnerId}", encodeURIComponent("" + partnerId));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function updatePartnerInfoMutationKey(partnerId: string): MutationKey {
  return trimArrayEnd([
      'CompanyPartnersClient',
      'updatePartnerInfo',
      partnerId as any,
    ]);
}

/**
 * Обновление информации о партнере
 * @param partnerId Идентификатор партнера
 * @return OK
 */
export function useUpdatePartnerInfoMutation<TContext>(partnerId: string, options?: Omit<UseMutationOptions<Types.CompanyPartnerDto, unknown, Types.UpdateCompanyPartnerDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.CompanyPartnerDto, unknown, Types.UpdateCompanyPartnerDto, TContext> {
  const key = updatePartnerInfoMutationKey(partnerId);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (body: Types.UpdateCompanyPartnerDto) => Client.updatePartnerInfo(partnerId, body),
    mutationKey: key,
  });
}
  
type UpdatePartnerInfo__MutationParameters = UpdatePartnerInfoCompanyPartnersQueryParameters & {
  body: Types.UpdateCompanyPartnerDto;
}

/**
 * Обновление информации о партнере
 * @param partnerId Идентификатор партнера
 * @return OK
 */
export function useUpdatePartnerInfoMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<Types.CompanyPartnerDto, unknown, UpdatePartnerInfo__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: UpdatePartnerInfoCompanyPartnersQueryParameters}): UseMutationResult<Types.CompanyPartnerDto, unknown, UpdatePartnerInfo__MutationParameters, TContext> {
  const key = updatePartnerInfoMutationKey(options?.parameters?.partnerId!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: UpdatePartnerInfo__MutationParameters) => Client.updatePartnerInfo(data.partnerId ?? options?.parameters?.partnerId!, data.body),
  mutationKey: key,
});
}
  
export function deletePartnerUrl(partnerId: string): string {
  let url_ = getBaseUrl() + "/api/v1/partner/{partnerId}";
if (partnerId === undefined || partnerId === null)
  throw new Error("The parameter 'partnerId' must be defined.");
url_ = url_.replace("{partnerId}", encodeURIComponent("" + partnerId));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function deletePartnerMutationKey(partnerId: string): MutationKey {
  return trimArrayEnd([
      'CompanyPartnersClient',
      'deletePartner',
      partnerId as any,
    ]);
}

/**
 * Удаление партнера
 * @param partnerId Идентификатор партнера
 * @return OK
 */
export function useDeletePartnerMutation<TContext>(partnerId: string, options?: Omit<UseMutationOptions<Types.Response, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.Response, unknown, void, TContext> {
  const key = deletePartnerMutationKey(partnerId);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client.deletePartner(partnerId),
    mutationKey: key,
  });
}
  
type DeletePartner__MutationParameters = DeletePartnerCompanyPartnersQueryParameters

/**
 * Удаление партнера
 * @param partnerId Идентификатор партнера
 * @return OK
 */
export function useDeletePartnerMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<Types.Response, unknown, DeletePartner__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: DeletePartnerCompanyPartnersQueryParameters}): UseMutationResult<Types.Response, unknown, DeletePartner__MutationParameters, TContext> {
  const key = deletePartnerMutationKey(options?.parameters?.partnerId!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: DeletePartner__MutationParameters) => Client.deletePartner(data.partnerId ?? options?.parameters?.partnerId!),
  mutationKey: key,
});
}
  
export function createPartnerUrl(): string {
  let url_ = getBaseUrl() + "/api/v1/partner";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function createPartnerMutationKey(): MutationKey {
  return trimArrayEnd([
      'CompanyPartnersClient',
      'createPartner',
    ]);
}

/**
 * Создание партнера
 * @return OK
 */
export function useCreatePartnerMutation<TContext>(options?: Omit<UseMutationOptions<Types.CompanyPartnerDto, unknown, Types.CreateCompanyPartnerDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.CompanyPartnerDto, unknown, Types.CreateCompanyPartnerDto, TContext> {
  const key = createPartnerMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (body: Types.CreateCompanyPartnerDto) => Client.createPartner(body),
    mutationKey: key,
  });
}
  
export function getPartnersUrl(id?: string | undefined, name?: string | undefined, isNew?: boolean | undefined, page?: number | undefined, size?: number | undefined, sort?: string[] | undefined): string {
  let url_ = getBaseUrl() + "/api/v1/partner/list?";
if (id === null)
    throw new Error("The parameter 'id' cannot be null.");
else if (id !== undefined)
    url_ += "id=" + encodeURIComponent("" + id) + "&";
if (name === null)
    throw new Error("The parameter 'name' cannot be null.");
else if (name !== undefined)
    url_ += "name=" + encodeURIComponent("" + name) + "&";
if (isNew === null)
    throw new Error("The parameter 'isNew' cannot be null.");
else if (isNew !== undefined)
    url_ += "isNew=" + encodeURIComponent("" + isNew) + "&";
if (page === null)
    throw new Error("The parameter 'page' cannot be null.");
else if (page !== undefined)
    url_ += "page=" + encodeURIComponent("" + page) + "&";
if (size === null)
    throw new Error("The parameter 'size' cannot be null.");
else if (size !== undefined)
    url_ += "size=" + encodeURIComponent("" + size) + "&";
if (sort === null)
    throw new Error("The parameter 'sort' cannot be null.");
else if (sort !== undefined)
    sort && sort.forEach(item => { url_ += "sort=" + encodeURIComponent("" + item) + "&"; });
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getPartnersDefaultOptions: Omit<UseQueryOptions<Types.PagedListDtoShortCompanyPartnerDto, unknown, Types.PagedListDtoShortCompanyPartnerDto>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<Types.PagedListDtoShortCompanyPartnerDto, unknown, Types.PagedListDtoShortCompanyPartnerDto>, 'queryFn'>> = {
};
export function getGetPartnersDefaultOptions() {
  return getPartnersDefaultOptions;
};
export function setGetPartnersDefaultOptions(options: typeof getPartnersDefaultOptions) {
  getPartnersDefaultOptions = options;
}

export function getPartnersQueryKey(dto: GetPartnersCompanyPartnersQueryParameters): QueryKey;
export function getPartnersQueryKey(id?: string | undefined, name?: string | undefined, isNew?: boolean | undefined, page?: number | undefined, size?: number | undefined, sort?: string[] | undefined): QueryKey;
export function getPartnersQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { id, name, isNew, page, size, sort,  } = params[0] as GetPartnersCompanyPartnersQueryParameters;

    return trimArrayEnd([
        'CompanyPartnersClient',
        'getPartners',
        id as any,
        name as any,
        isNew as any,
        page as any,
        size as any,
        sort as any,
      ]);
  } else {
    return trimArrayEnd([
        'CompanyPartnersClient',
        'getPartners',
        ...params
      ]);
  }
}
export function __getPartners(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.getPartners(
      context.queryKey[2] as string | undefined,       context.queryKey[3] as string | undefined,       context.queryKey[4] as boolean | undefined,       context.queryKey[5] as number | undefined,       context.queryKey[6] as number | undefined,       context.queryKey[7] as string[] | undefined,axiosConfig    );
}

export function useGetPartnersQuery<TSelectData = Types.PagedListDtoShortCompanyPartnerDto, TError = unknown>(dto: GetPartnersCompanyPartnersQueryParameters, options?: Omit<UseQueryOptions<Types.PagedListDtoShortCompanyPartnerDto, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
/**
 * Получение списка партнеров хитса
 * @param id (optional) Идентификатор компании
 * @param name (optional) Название компании (разрешается частичное совпадение)
 * @param isNew (optional) Только новые компании (те, в которых никто не проходит практику)
 * @param page (optional) Zero-based page index (0..N)
 * @param size (optional) The size of the page to be returned
 * @param sort (optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
 * @return OK
 */
export function useGetPartnersQuery<TSelectData = Types.PagedListDtoShortCompanyPartnerDto, TError = unknown>(id?: string | undefined, name?: string | undefined, isNew?: boolean | undefined, page?: number | undefined, size?: number | undefined, sort?: string[] | undefined, options?: Omit<UseQueryOptions<Types.PagedListDtoShortCompanyPartnerDto, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useGetPartnersQuery<TSelectData = Types.PagedListDtoShortCompanyPartnerDto, TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.PagedListDtoShortCompanyPartnerDto, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  let id: any = undefined;
  let name: any = undefined;
  let isNew: any = undefined;
  let page: any = undefined;
  let size: any = undefined;
  let sort: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ id, name, isNew, page, size, sort,  } = params[0] as GetPartnersCompanyPartnersQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [id, name, isNew, page, size, sort, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.PagedListDtoShortCompanyPartnerDto, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __getPartners(context, axiosConfig) : __getPartners,
    queryKey: getPartnersQueryKey(id, name, isNew, page, size, sort),
    ...getPartnersDefaultOptions as unknown as Omit<UseQueryOptions<Types.PagedListDtoShortCompanyPartnerDto, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Получение списка партнеров хитса
 * @param id (optional) Идентификатор компании
 * @param name (optional) Название компании (разрешается частичное совпадение)
 * @param isNew (optional) Только новые компании (те, в которых никто не проходит практику)
 * @param page (optional) Zero-based page index (0..N)
 * @param size (optional) The size of the page to be returned
 * @param sort (optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
 * @return OK
 */
export function setGetPartnersData(queryClient: QueryClient, updater: (data: Types.PagedListDtoShortCompanyPartnerDto | undefined) => Types.PagedListDtoShortCompanyPartnerDto, id?: string | undefined, name?: string | undefined, isNew?: boolean | undefined, page?: number | undefined, size?: number | undefined, sort?: string[] | undefined) {
  queryClient.setQueryData(getPartnersQueryKey(id, name, isNew, page, size, sort),
    updater
  );
}

/**
 * Получение списка партнеров хитса
 * @param id (optional) Идентификатор компании
 * @param name (optional) Название компании (разрешается частичное совпадение)
 * @param isNew (optional) Только новые компании (те, в которых никто не проходит практику)
 * @param page (optional) Zero-based page index (0..N)
 * @param size (optional) The size of the page to be returned
 * @param sort (optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
 * @return OK
 */
export function setGetPartnersDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.PagedListDtoShortCompanyPartnerDto | undefined) => Types.PagedListDtoShortCompanyPartnerDto) {
  queryClient.setQueryData(queryKey, updater);
}