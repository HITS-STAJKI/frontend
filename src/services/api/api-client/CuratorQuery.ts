//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
//@ts-nocheck
import * as Types from '../api-client.types';
import { useQuery, useMutation } from '@tanstack/react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from '@tanstack/react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import * as Client from './CuratorClient'
export { Client };
import type { AxiosRequestConfig } from 'axios';

export type UpdateCuratorRoleCuratorQueryParameters = {
  id: string;
}

export type GetAllCuratorsCuratorQueryParameters = {
  page?: number | undefined;
  size?: number | undefined;
  sort?: string[] | undefined;
  fullName?: string | undefined;
}

export function updateCuratorRoleUrl(id: string): string {
  let url_ = getBaseUrl() + "/api/v1/curator/{id}";
  if (id === undefined || id === null)
    throw new Error("The parameter 'id' must be defined.");
  url_ = url_.replace("{id}", encodeURIComponent("" + id));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function updateCuratorRoleMutationKey(id: string): MutationKey {
  return trimArrayEnd([
    'CuratorClient',
    'updateCuratorRole',
    id as any,
  ]);
}

/**
 * Обновление информации о кураторе
 * @return OK
 */
export function useUpdateCuratorRoleMutation<TContext>(id: string, options?: Omit<UseMutationOptions<Types.CuratorDto, unknown, Types.CuratorEditDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.CuratorDto, unknown, Types.CuratorEditDto, TContext> {
  const key = updateCuratorRoleMutationKey(id);

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useMutation({
    ...options,
    mutationFn: (body: Types.CuratorEditDto) => Client.updateCuratorRole(id, body),
    mutationKey: key,
  });
}

type UpdateCuratorRole__MutationParameters = UpdateCuratorRoleCuratorQueryParameters & {
  body: Types.CuratorEditDto;
}

/**
 * Обновление информации о кураторе
 * @return OK
 */
export function useUpdateCuratorRoleMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<Types.CuratorDto, unknown, UpdateCuratorRole__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: UpdateCuratorRoleCuratorQueryParameters }): UseMutationResult<Types.CuratorDto, unknown, UpdateCuratorRole__MutationParameters, TContext> {
  const key = updateCuratorRoleMutationKey(options?.parameters?.id!);

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useMutation({
    ...options,
    mutationFn: (data: UpdateCuratorRole__MutationParameters) => Client.updateCuratorRole(data.id ?? options?.parameters?.id!, data.body),
    mutationKey: key,
  });
}

export function createCuratorUrl(): string {
  let url_ = getBaseUrl() + "/api/v1/curator";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function createCuratorMutationKey(): MutationKey {
  return trimArrayEnd([
    'CuratorClient',
    'createCurator',
  ]);
}

/**
 * Создание куратора
 * @return OK
 */
export function useCreateCuratorMutation<TContext>(options?: Omit<UseMutationOptions<Types.CuratorDto, unknown, Types.CuratorCreateDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.CuratorDto, unknown, Types.CuratorCreateDto, TContext> {
  const key = createCuratorMutationKey();

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useMutation({
    ...options,
    mutationFn: (body: Types.CuratorCreateDto) => Client.createCurator(body),
    mutationKey: key,
  });
}

export function getAllCuratorsUrl(page?: number | undefined, size?: number | undefined, sort?: string[] | undefined, fullName?: string | undefined): string {
  let url_ = getBaseUrl() + "/api/v1/curator/list?";
  if (page === null)
    throw new Error("The parameter 'page' cannot be null.");
  else if (page !== undefined)
    url_ += "page=" + encodeURIComponent("" + page) + "&";
  if (size === null)
    throw new Error("The parameter 'size' cannot be null.");
  else if (size !== undefined)
    url_ += "size=" + encodeURIComponent("" + size) + "&";
  if (sort === null)
    throw new Error("The parameter 'sort' cannot be null.");
  else if (sort !== undefined)
    sort && sort.forEach(item => { url_ += "sort=" + encodeURIComponent("" + item) + "&"; });
  if (fullName === null)
    throw new Error("The parameter 'fullName' cannot be null.");
  else if (fullName !== undefined)
    url_ += "fullName=" + encodeURIComponent("" + fullName) + "&";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getAllCuratorsDefaultOptions: Omit<UseQueryOptions<Types.PagedListDtoCuratorDto, unknown, Types.PagedListDtoCuratorDto>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<Types.PagedListDtoCuratorDto, unknown, Types.PagedListDtoCuratorDto>, 'queryFn'>> = {
};
export function getGetAllCuratorsDefaultOptions() {
  return getAllCuratorsDefaultOptions;
};
export function setGetAllCuratorsDefaultOptions(options: typeof getAllCuratorsDefaultOptions) {
  getAllCuratorsDefaultOptions = options;
}

export function getAllCuratorsQueryKey(dto: GetAllCuratorsCuratorQueryParameters): QueryKey;
export function getAllCuratorsQueryKey(page?: number | undefined, size?: number | undefined, sort?: string[] | undefined, fullName?: string | undefined): QueryKey;
export function getAllCuratorsQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { page, size, sort, fullName, } = params[0] as GetAllCuratorsCuratorQueryParameters;

    return trimArrayEnd([
      'CuratorClient',
      'getAllCurators',
      page as any,
      size as any,
      sort as any,
      fullName as any,
    ]);
  } else {
    return trimArrayEnd([
      'CuratorClient',
      'getAllCurators',
      ...params
    ]);
  }
}
export function __getAllCurators(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.getAllCurators(
    context.queryKey[2] as number | undefined, context.queryKey[3] as number | undefined, context.queryKey[4] as string[] | undefined, context.queryKey[5] as string | undefined, axiosConfig);
}

export function useGetAllCuratorsQuery<TSelectData = Types.PagedListDtoCuratorDto, TError = unknown>(dto: GetAllCuratorsCuratorQueryParameters, options?: Omit<UseQueryOptions<Types.PagedListDtoCuratorDto, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
/**
 * Получение всех кураторов
 * @param page (optional) Zero-based page index (0..N)
 * @param size (optional) The size of the page to be returned
 * @param sort (optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
 * @param fullName (optional) 
 * @return OK
 */
export function useGetAllCuratorsQuery<TSelectData = Types.PagedListDtoCuratorDto, TError = unknown>(page?: number | undefined, size?: number | undefined, sort?: string[] | undefined, fullName?: string | undefined, options?: Omit<UseQueryOptions<Types.PagedListDtoCuratorDto, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useGetAllCuratorsQuery<TSelectData = Types.PagedListDtoCuratorDto, TError = unknown>(...params: any[]): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.PagedListDtoCuratorDto, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig | undefined = undefined;
  let page: any = undefined;
  let size: any = undefined;
  let sort: any = undefined;
  let fullName: any = undefined;

  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ page, size, sort, fullName, } = params[0] as GetAllCuratorsCuratorQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [page, size, sort, fullName, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.PagedListDtoCuratorDto, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __getAllCurators(context, axiosConfig) : __getAllCurators,
    queryKey: getAllCuratorsQueryKey(page, size, sort, fullName),
    ...getAllCuratorsDefaultOptions as unknown as Omit<UseQueryOptions<Types.PagedListDtoCuratorDto, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Получение всех кураторов
 * @param page (optional) Zero-based page index (0..N)
 * @param size (optional) The size of the page to be returned
 * @param sort (optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
 * @param fullName (optional) 
 * @return OK
 */
export function setGetAllCuratorsData(queryClient: QueryClient, updater: (data: Types.PagedListDtoCuratorDto | undefined) => Types.PagedListDtoCuratorDto, page?: number | undefined, size?: number | undefined, sort?: string[] | undefined, fullName?: string | undefined) {
  queryClient.setQueryData(getAllCuratorsQueryKey(page, size, sort, fullName),
    updater
  );
}

/**
 * Получение всех кураторов
 * @param page (optional) Zero-based page index (0..N)
 * @param size (optional) The size of the page to be returned
 * @param sort (optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
 * @param fullName (optional) 
 * @return OK
 */
export function setGetAllCuratorsDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.PagedListDtoCuratorDto | undefined) => Types.PagedListDtoCuratorDto) {
  queryClient.setQueryData(queryKey, updater);
}