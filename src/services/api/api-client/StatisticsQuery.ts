//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
//@ts-nocheck
import * as Types from '../api-client.types';
import { useQuery, useMutation } from '@tanstack/react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from '@tanstack/react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import * as Client from './StatisticsClient'
export { Client };
import type { AxiosRequestConfig } from 'axios';

export type CountStudentsByFilterStatisticsQueryParameters = {
  fullName?: string | undefined;
  isAcadem?: boolean | undefined;
  isGraduated?: boolean | undefined;
  groupIds?: string[] | undefined;
  companyIds?: string[] | undefined;
  isOnPractice?: boolean | undefined;
  hasPracticeRequest?: boolean | undefined;
  hasInterviews?: boolean | undefined;
  stackIds?: string[] | undefined;
  includeArchived?: boolean | undefined;
}

export function countStudentsByFilterUrl(fullName?: string | undefined, isAcadem?: boolean | undefined, isGraduated?: boolean | undefined, groupIds?: string[] | undefined, companyIds?: string[] | undefined, isOnPractice?: boolean | undefined, hasPracticeRequest?: boolean | undefined, hasInterviews?: boolean | undefined, stackIds?: string[] | undefined, includeArchived?: boolean | undefined): string {
  let url_ = getBaseUrl() + "/api/v1/statistics/students/count?";
  if (fullName === null)
    throw new Error("The parameter 'fullName' cannot be null.");
  else if (fullName !== undefined)
    url_ += "fullName=" + encodeURIComponent("" + fullName) + "&";
  if (isAcadem === null)
    throw new Error("The parameter 'isAcadem' cannot be null.");
  else if (isAcadem !== undefined)
    url_ += "isAcadem=" + encodeURIComponent("" + isAcadem) + "&";
  if (isGraduated === null)
    throw new Error("The parameter 'isGraduated' cannot be null.");
  else if (isGraduated !== undefined)
    url_ += "isGraduated=" + encodeURIComponent("" + isGraduated) + "&";
  if (groupIds === null)
    throw new Error("The parameter 'groupIds' cannot be null.");
  else if (groupIds !== undefined)
    groupIds && groupIds.forEach(item => { url_ += "groupIds=" + encodeURIComponent("" + item) + "&"; });
  if (companyIds === null)
    throw new Error("The parameter 'companyIds' cannot be null.");
  else if (companyIds !== undefined)
    companyIds && companyIds.forEach(item => { url_ += "companyIds=" + encodeURIComponent("" + item) + "&"; });
  if (isOnPractice === null)
    throw new Error("The parameter 'isOnPractice' cannot be null.");
  else if (isOnPractice !== undefined)
    url_ += "isOnPractice=" + encodeURIComponent("" + isOnPractice) + "&";
  if (hasPracticeRequest === null)
    throw new Error("The parameter 'hasPracticeRequest' cannot be null.");
  else if (hasPracticeRequest !== undefined)
    url_ += "hasPracticeRequest=" + encodeURIComponent("" + hasPracticeRequest) + "&";
  if (hasInterviews === null)
    throw new Error("The parameter 'hasInterviews' cannot be null.");
  else if (hasInterviews !== undefined)
    url_ += "hasInterviews=" + encodeURIComponent("" + hasInterviews) + "&";
  if (stackIds === null)
    throw new Error("The parameter 'stackIds' cannot be null.");
  else if (stackIds !== undefined)
    stackIds && stackIds.forEach(item => { url_ += "stackIds=" + encodeURIComponent("" + item) + "&"; });
  if (includeArchived === null)
    throw new Error("The parameter 'includeArchived' cannot be null.");
  else if (includeArchived !== undefined)
    url_ += "includeArchived=" + encodeURIComponent("" + includeArchived) + "&";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let countStudentsByFilterDefaultOptions: Omit<UseQueryOptions<Types.StatisticsResponse, unknown, Types.StatisticsResponse>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<Types.StatisticsResponse, unknown, Types.StatisticsResponse>, 'queryFn'>> = {
};
export function getCountStudentsByFilterDefaultOptions() {
  return countStudentsByFilterDefaultOptions;
};
export function setCountStudentsByFilterDefaultOptions(options: typeof countStudentsByFilterDefaultOptions) {
  countStudentsByFilterDefaultOptions = options;
}

export function countStudentsByFilterQueryKey(dto: CountStudentsByFilterStatisticsQueryParameters): QueryKey;
export function countStudentsByFilterQueryKey(fullName?: string | undefined, isAcadem?: boolean | undefined, isGraduated?: boolean | undefined, groupIds?: string[] | undefined, companyIds?: string[] | undefined, isOnPractice?: boolean | undefined, hasPracticeRequest?: boolean | undefined, hasInterviews?: boolean | undefined, stackIds?: string[] | undefined, includeArchived?: boolean | undefined): QueryKey;
export function countStudentsByFilterQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { fullName, isAcadem, isGraduated, groupIds, companyIds, isOnPractice, hasPracticeRequest, hasInterviews, stackIds, includeArchived, } = params[0] as CountStudentsByFilterStatisticsQueryParameters;

    return trimArrayEnd([
      'StatisticsClient',
      'countStudentsByFilter',
      fullName as any,
      isAcadem as any,
      isGraduated as any,
      groupIds as any,
      companyIds as any,
      isOnPractice as any,
      hasPracticeRequest as any,
      hasInterviews as any,
      stackIds as any,
      includeArchived as any,
    ]);
  } else {
    return trimArrayEnd([
      'StatisticsClient',
      'countStudentsByFilter',
      ...params
    ]);
  }
}
export function __countStudentsByFilter(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.countStudentsByFilter(
    context.queryKey[2] as string | undefined, context.queryKey[3] as boolean | undefined, context.queryKey[4] as boolean | undefined, context.queryKey[5] as string[] | undefined, context.queryKey[6] as string[] | undefined, context.queryKey[7] as boolean | undefined, context.queryKey[8] as boolean | undefined, context.queryKey[9] as boolean | undefined, context.queryKey[10] as string[] | undefined, context.queryKey[11] as boolean | undefined, axiosConfig);
}

export function useCountStudentsByFilterQuery<TSelectData = Types.StatisticsResponse, TError = unknown>(dto: CountStudentsByFilterStatisticsQueryParameters, options?: Omit<UseQueryOptions<Types.StatisticsResponse, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
/**
 * Получить количество студентов по фильтру
 * @param fullName (optional) ФИО
 * @param isAcadem (optional) Статус нахождения студента в академе
 * @param isGraduated (optional) Статус выпуска студента
 * @param groupIds (optional) Идентификаторы потоков
 * @param companyIds (optional) Идентификаторы компаний-партнеров
 * @param isOnPractice (optional) Находятся на практике/не находятся
 * @param hasPracticeRequest (optional) Наличие заявки на практику
 * @param hasInterviews (optional) Приступили/не приступили к собеседованиям
 * @param stackIds (optional) Идентификаторы стеков
 * @param includeArchived (optional) Включать архивные данные
 * @return OK
 */
export function useCountStudentsByFilterQuery<TSelectData = Types.StatisticsResponse, TError = unknown>(fullName?: string | undefined, isAcadem?: boolean | undefined, isGraduated?: boolean | undefined, groupIds?: string[] | undefined, companyIds?: string[] | undefined, isOnPractice?: boolean | undefined, hasPracticeRequest?: boolean | undefined, hasInterviews?: boolean | undefined, stackIds?: string[] | undefined, includeArchived?: boolean | undefined, options?: Omit<UseQueryOptions<Types.StatisticsResponse, TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useCountStudentsByFilterQuery<TSelectData = Types.StatisticsResponse, TError = unknown>(...params: any[]): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.StatisticsResponse, TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig | undefined = undefined;
  let fullName: any = undefined;
  let isAcadem: any = undefined;
  let isGraduated: any = undefined;
  let groupIds: any = undefined;
  let companyIds: any = undefined;
  let isOnPractice: any = undefined;
  let hasPracticeRequest: any = undefined;
  let hasInterviews: any = undefined;
  let stackIds: any = undefined;
  let includeArchived: any = undefined;

  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ fullName, isAcadem, isGraduated, groupIds, companyIds, isOnPractice, hasPracticeRequest, hasInterviews, stackIds, includeArchived, } = params[0] as CountStudentsByFilterStatisticsQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [fullName, isAcadem, isGraduated, groupIds, companyIds, isOnPractice, hasPracticeRequest, hasInterviews, stackIds, includeArchived, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.StatisticsResponse, TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __countStudentsByFilter(context, axiosConfig) : __countStudentsByFilter,
    queryKey: countStudentsByFilterQueryKey(fullName, isAcadem, isGraduated, groupIds, companyIds, isOnPractice, hasPracticeRequest, hasInterviews, stackIds, includeArchived),
    ...countStudentsByFilterDefaultOptions as unknown as Omit<UseQueryOptions<Types.StatisticsResponse, TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Получить количество студентов по фильтру
 * @param fullName (optional) ФИО
 * @param isAcadem (optional) Статус нахождения студента в академе
 * @param isGraduated (optional) Статус выпуска студента
 * @param groupIds (optional) Идентификаторы потоков
 * @param companyIds (optional) Идентификаторы компаний-партнеров
 * @param isOnPractice (optional) Находятся на практике/не находятся
 * @param hasPracticeRequest (optional) Наличие заявки на практику
 * @param hasInterviews (optional) Приступили/не приступили к собеседованиям
 * @param stackIds (optional) Идентификаторы стеков
 * @param includeArchived (optional) Включать архивные данные
 * @return OK
 */
export function setCountStudentsByFilterData(queryClient: QueryClient, updater: (data: Types.StatisticsResponse | undefined) => Types.StatisticsResponse, fullName?: string | undefined, isAcadem?: boolean | undefined, isGraduated?: boolean | undefined, groupIds?: string[] | undefined, companyIds?: string[] | undefined, isOnPractice?: boolean | undefined, hasPracticeRequest?: boolean | undefined, hasInterviews?: boolean | undefined, stackIds?: string[] | undefined, includeArchived?: boolean | undefined) {
  queryClient.setQueryData(countStudentsByFilterQueryKey(fullName, isAcadem, isGraduated, groupIds, companyIds, isOnPractice, hasPracticeRequest, hasInterviews, stackIds, includeArchived),
    updater
  );
}

/**
 * Получить количество студентов по фильтру
 * @param fullName (optional) ФИО
 * @param isAcadem (optional) Статус нахождения студента в академе
 * @param isGraduated (optional) Статус выпуска студента
 * @param groupIds (optional) Идентификаторы потоков
 * @param companyIds (optional) Идентификаторы компаний-партнеров
 * @param isOnPractice (optional) Находятся на практике/не находятся
 * @param hasPracticeRequest (optional) Наличие заявки на практику
 * @param hasInterviews (optional) Приступили/не приступили к собеседованиям
 * @param stackIds (optional) Идентификаторы стеков
 * @param includeArchived (optional) Включать архивные данные
 * @return OK
 */
export function setCountStudentsByFilterDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.StatisticsResponse | undefined) => Types.StatisticsResponse) {
  queryClient.setQueryData(queryKey, updater);
}