//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import * as Types from '../api-client.types';
import { useQuery, useMutation } from '@tanstack/react-query';
import type { UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient, QueryKey, MutationKey, UseMutationOptions, UseMutationResult, QueryMeta, MutationMeta } from '@tanstack/react-query';
import { trimArrayEnd, isParameterObject, getBaseUrl, addMetaToOptions } from './helpers';
import type { QueryMetaContextValue } from 'react-query-swagger';
import { QueryMetaContext } from 'react-query-swagger';
import { useContext } from 'react';
import * as Client from './StackClient'
export { Client };
import type { AxiosRequestConfig } from 'axios';

export type UpdateStackStackQueryParameters = {
  stackId: string ;
}

export type DeleteStackStackQueryParameters = {
  stackId: string ;
}

export type GetStackListStackQueryParameters = {
  query?: string | undefined ;
}

export function updateStackUrl(stackId: string): string {
  let url_ = getBaseUrl() + "/api/v1/stack/{stackId}";
if (stackId === undefined || stackId === null)
  throw new Error("The parameter 'stackId' must be defined.");
url_ = url_.replace("{stackId}", encodeURIComponent("" + stackId));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function updateStackMutationKey(stackId: string): MutationKey {
  return trimArrayEnd([
      'StackClient',
      'updateStack',
      stackId as any,
    ]);
}

/**
 * Обновить стек
 * @param stackId Идентификатор стека
 * @return OK
 */
export function useUpdateStackMutation<TContext>(stackId: string, options?: Omit<UseMutationOptions<Types.StackDto, unknown, Types.UpdateStackDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.StackDto, unknown, Types.UpdateStackDto, TContext> {
  const key = updateStackMutationKey(stackId);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (body: Types.UpdateStackDto) => Client.updateStack(stackId, body),
    mutationKey: key,
  });
}
  
type UpdateStack__MutationParameters = UpdateStackStackQueryParameters & {
  body: Types.UpdateStackDto;
}

/**
 * Обновить стек
 * @param stackId Идентификатор стека
 * @return OK
 */
export function useUpdateStackMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<Types.StackDto, unknown, UpdateStack__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: UpdateStackStackQueryParameters}): UseMutationResult<Types.StackDto, unknown, UpdateStack__MutationParameters, TContext> {
  const key = updateStackMutationKey(options?.parameters?.stackId!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: UpdateStack__MutationParameters) => Client.updateStack(data.stackId ?? options?.parameters?.stackId!, data.body),
  mutationKey: key,
});
}
  
export function deleteStackUrl(stackId: string): string {
  let url_ = getBaseUrl() + "/api/v1/stack/{stackId}";
if (stackId === undefined || stackId === null)
  throw new Error("The parameter 'stackId' must be defined.");
url_ = url_.replace("{stackId}", encodeURIComponent("" + stackId));
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function deleteStackMutationKey(stackId: string): MutationKey {
  return trimArrayEnd([
      'StackClient',
      'deleteStack',
      stackId as any,
    ]);
}

/**
 * Удалить стек
 * @param stackId Идентификатор стека
 * @return OK
 */
export function useDeleteStackMutation<TContext>(stackId: string, options?: Omit<UseMutationOptions<Types.Response, unknown, void, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.Response, unknown, void, TContext> {
  const key = deleteStackMutationKey(stackId);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: () => Client.deleteStack(stackId),
    mutationKey: key,
  });
}
  
type DeleteStack__MutationParameters = DeleteStackStackQueryParameters

/**
 * Удалить стек
 * @param stackId Идентификатор стека
 * @return OK
 */
export function useDeleteStackMutationWithParameters<TContext>(options?: Omit<UseMutationOptions<Types.Response, unknown, DeleteStack__MutationParameters, TContext>, 'mutationKey' | 'mutationFn'> & { parameters?: DeleteStackStackQueryParameters}): UseMutationResult<Types.Response, unknown, DeleteStack__MutationParameters, TContext> {
  const key = deleteStackMutationKey(options?.parameters?.stackId!);
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
return useMutation({
  ...options, 
  mutationFn: (data: DeleteStack__MutationParameters) => Client.deleteStack(data.stackId ?? options?.parameters?.stackId!),
  mutationKey: key,
});
}
  
export function createStackUrl(): string {
  let url_ = getBaseUrl() + "/api/v1/stack";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

export function createStackMutationKey(): MutationKey {
  return trimArrayEnd([
      'StackClient',
      'createStack',
    ]);
}

/**
 * Создать стек
 * @return OK
 */
export function useCreateStackMutation<TContext>(options?: Omit<UseMutationOptions<Types.StackDto, unknown, Types.CreateStackDto, TContext>, 'mutationKey' | 'mutationFn'>): UseMutationResult<Types.StackDto, unknown, Types.CreateStackDto, TContext> {
  const key = createStackMutationKey();
  
  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);
  
  return useMutation({
    ...options,
    mutationFn: (body: Types.CreateStackDto) => Client.createStack(body),
    mutationKey: key,
  });
}
  
export function getStackListUrl(query?: string | undefined): string {
  let url_ = getBaseUrl() + "/api/v1/stack/list?";
if (query === null)
    throw new Error("The parameter 'query' cannot be null.");
else if (query !== undefined)
    url_ += "query=" + encodeURIComponent("" + query) + "&";
  url_ = url_.replace(/[?&]$/, "");
  return url_;
}

let getStackListDefaultOptions: Omit<UseQueryOptions<Types.StackDto[], unknown, Types.StackDto[]>, 'queryKey' | 'queryFn'> & Partial<Pick<UseQueryOptions<Types.StackDto[], unknown, Types.StackDto[]>, 'queryFn'>> = {
};
export function getGetStackListDefaultOptions() {
  return getStackListDefaultOptions;
};
export function setGetStackListDefaultOptions(options: typeof getStackListDefaultOptions) {
  getStackListDefaultOptions = options;
}

export function getStackListQueryKey(query?: string | undefined): QueryKey;
export function getStackListQueryKey(...params: any[]): QueryKey {
  if (params.length === 1 && isParameterObject(params[0])) {
    const { query,  } = params[0] as GetStackListStackQueryParameters;

    return trimArrayEnd([
        'StackClient',
        'getStackList',
        query as any,
      ]);
  } else {
    return trimArrayEnd([
        'StackClient',
        'getStackList',
        ...params
      ]);
  }
}
export function __getStackList(context: QueryFunctionContext, axiosConfig?: AxiosRequestConfig | undefined) {
  return Client.getStackList(
      context.queryKey[2] as string | undefined,axiosConfig    );
}

export function useGetStackListQuery<TSelectData = Types.StackDto[], TError = unknown>(dto: GetStackListStackQueryParameters, options?: Omit<UseQueryOptions<Types.StackDto[], TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
/**
 * Получить список стеков
 * @param query (optional) Название стека
 * @return OK
 */
export function useGetStackListQuery<TSelectData = Types.StackDto[], TError = unknown>(query?: string | undefined, options?: Omit<UseQueryOptions<Types.StackDto[], TError, TSelectData>, 'queryKey'>, axiosConfig?: Partial<AxiosRequestConfig>): UseQueryResult<TSelectData, TError>;
export function useGetStackListQuery<TSelectData = Types.StackDto[], TError = unknown>(...params: any []): UseQueryResult<TSelectData, TError> {
  let options: UseQueryOptions<Types.StackDto[], TError, TSelectData> | undefined = undefined;
  let axiosConfig: AxiosRequestConfig |undefined = undefined;
  let query: any = undefined;
  
  if (params.length > 0) {
    if (isParameterObject(params[0])) {
      ({ query,  } = params[0] as GetStackListStackQueryParameters);
      options = params[1];
      axiosConfig = params[2];
    } else {
      [query, options, axiosConfig] = params;
    }
  }

  const metaContext = useContext(QueryMetaContext);
  options = addMetaToOptions(options, metaContext);

  return useQuery<Types.StackDto[], TError, TSelectData>({
    queryFn: axiosConfig ? (context) => __getStackList(context, axiosConfig) : __getStackList,
    queryKey: getStackListQueryKey(query),
    ...getStackListDefaultOptions as unknown as Omit<UseQueryOptions<Types.StackDto[], TError, TSelectData>, 'queryKey'>,
    ...options,
  });
}
/**
 * Получить список стеков
 * @param query (optional) Название стека
 * @return OK
 */
export function setGetStackListData(queryClient: QueryClient, updater: (data: Types.StackDto[] | undefined) => Types.StackDto[], query?: string | undefined) {
  queryClient.setQueryData(getStackListQueryKey(query),
    updater
  );
}

/**
 * Получить список стеков
 * @param query (optional) Название стека
 * @return OK
 */
export function setGetStackListDataByQueryId(queryClient: QueryClient, queryKey: QueryKey, updater: (data: Types.StackDto[] | undefined) => Types.StackDto[]) {
  queryClient.setQueryData(queryKey, updater);
}