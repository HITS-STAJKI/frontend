//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
//@ts-nocheck
import * as Types from '../api-client.types';
import type { AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

import { throwException, isAxiosError } from '../api-client.types';
import { getAxios, getBaseUrl } from './helpers';

/**
 * Обновление информации о кураторе
 * @return OK
 */
export function updateCuratorRole(id: string, body: Types.CuratorEditDto, config?: AxiosRequestConfig | undefined): Promise<Types.CuratorDto> {
    let url_ = getBaseUrl() + "/api/v1/curator/{id}";
    if (id === undefined || id === null)
        throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = Types.serializeCuratorEditDto(body);

    let options_: AxiosRequestConfig = {
        ..._requestConfigUpdateCuratorRole,
        ...config,
        data: content_,
        method: "PUT",
        url: url_,
        headers: {
            ..._requestConfigUpdateCuratorRole?.headers,
            "Content-Type": "application/json",
            "Accept": "*/*",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processUpdateCuratorRole(_response);
    });
}

function processUpdateCuratorRole(response: AxiosResponse): Promise<Types.CuratorDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 409) {
        const _responseText = response.data;
        let result409: any = null;
        let resultData409 = _responseText;
        result409 = Types.initErrorResponse(resultData409);
        return throwException("Conflict", status, _responseText, _headers, result409);

    } else if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400 = _responseText;
        result400 = Types.initErrorResponse(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);

    } else if (status === 500) {
        const _responseText = response.data;
        let result500: any = null;
        let resultData500 = _responseText;
        result500 = Types.initErrorResponse(resultData500);
        return throwException("Internal Server Error", status, _responseText, _headers, result500);

    } else if (status === 401) {
        const _responseText = response.data;
        let result401: any = null;
        let resultData401 = _responseText;
        result401 = Types.initErrorResponse(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);

    } else if (status === 404) {
        const _responseText = response.data;
        let result404: any = null;
        let resultData404 = _responseText;
        result404 = Types.initErrorResponse(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200 = _responseText;
        result200 = Types.initCuratorDto(resultData200);
        return Promise.resolve<Types.CuratorDto>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.CuratorDto>(null as any);
}

/**
 * Создание куратора
 * @return OK
 */
export function createCurator(body: Types.CuratorCreateDto, config?: AxiosRequestConfig | undefined): Promise<Types.CuratorDto> {
    let url_ = getBaseUrl() + "/api/v1/curator";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = Types.serializeCuratorCreateDto(body);

    let options_: AxiosRequestConfig = {
        ..._requestConfigCreateCurator,
        ...config,
        data: content_,
        method: "POST",
        url: url_,
        headers: {
            ..._requestConfigCreateCurator?.headers,
            "Content-Type": "application/json",
            "Accept": "*/*",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processCreateCurator(_response);
    });
}

function processCreateCurator(response: AxiosResponse): Promise<Types.CuratorDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 409) {
        const _responseText = response.data;
        let result409: any = null;
        let resultData409 = _responseText;
        result409 = Types.initErrorResponse(resultData409);
        return throwException("Conflict", status, _responseText, _headers, result409);

    } else if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400 = _responseText;
        result400 = Types.initErrorResponse(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);

    } else if (status === 500) {
        const _responseText = response.data;
        let result500: any = null;
        let resultData500 = _responseText;
        result500 = Types.initErrorResponse(resultData500);
        return throwException("Internal Server Error", status, _responseText, _headers, result500);

    } else if (status === 401) {
        const _responseText = response.data;
        let result401: any = null;
        let resultData401 = _responseText;
        result401 = Types.initErrorResponse(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);

    } else if (status === 404) {
        const _responseText = response.data;
        let result404: any = null;
        let resultData404 = _responseText;
        result404 = Types.initErrorResponse(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200 = _responseText;
        result200 = Types.initCuratorDto(resultData200);
        return Promise.resolve<Types.CuratorDto>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.CuratorDto>(null as any);
}

/**
 * Получение всех кураторов
 * @param page (optional) Zero-based page index (0..N)
 * @param size (optional) The size of the page to be returned
 * @param sort (optional) Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
 * @param fullName (optional) 
 * @return OK
 */
export function getAllCurators(page?: number | undefined, size?: number | undefined, sort?: string[] | undefined, fullName?: string | undefined, config?: AxiosRequestConfig | undefined): Promise<Types.PagedListDtoCuratorDto> {
    let url_ = getBaseUrl() + "/api/v1/curator/list?";
    if (page === null)
        throw new Error("The parameter 'page' cannot be null.");
    else if (page !== undefined)
        url_ += "page=" + encodeURIComponent("" + page) + "&";
    if (size === null)
        throw new Error("The parameter 'size' cannot be null.");
    else if (size !== undefined)
        url_ += "size=" + encodeURIComponent("" + size) + "&";
    if (sort === null)
        throw new Error("The parameter 'sort' cannot be null.");
    else if (sort !== undefined)
        sort && sort.forEach(item => { url_ += "sort=" + encodeURIComponent("" + item) + "&"; });
    if (fullName === null)
        throw new Error("The parameter 'fullName' cannot be null.");
    else if (fullName !== undefined)
        url_ += "fullName=" + encodeURIComponent("" + fullName) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: AxiosRequestConfig = {
        ..._requestConfigGetAllCurators,
        ...config,
        method: "GET",
        url: url_,
        headers: {
            ..._requestConfigGetAllCurators?.headers,
            "Accept": "*/*",
            ...config?.headers,
        }
    };

    return getAxios().request(options_).catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
            return _error.response;
        } else {
            throw _error;
        }
    }).then((_response: AxiosResponse) => {
        return processGetAllCurators(_response);
    });
}

function processGetAllCurators(response: AxiosResponse): Promise<Types.PagedListDtoCuratorDto> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (let k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 409) {
        const _responseText = response.data;
        let result409: any = null;
        let resultData409 = _responseText;
        result409 = Types.initErrorResponse(resultData409);
        return throwException("Conflict", status, _responseText, _headers, result409);

    } else if (status === 400) {
        const _responseText = response.data;
        let result400: any = null;
        let resultData400 = _responseText;
        result400 = Types.initErrorResponse(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);

    } else if (status === 500) {
        const _responseText = response.data;
        let result500: any = null;
        let resultData500 = _responseText;
        result500 = Types.initErrorResponse(resultData500);
        return throwException("Internal Server Error", status, _responseText, _headers, result500);

    } else if (status === 401) {
        const _responseText = response.data;
        let result401: any = null;
        let resultData401 = _responseText;
        result401 = Types.initErrorResponse(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);

    } else if (status === 404) {
        const _responseText = response.data;
        let result404: any = null;
        let resultData404 = _responseText;
        result404 = Types.initErrorResponse(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);

    } else if (status === 200) {
        const _responseText = response.data;
        let result200: any = null;
        let resultData200 = _responseText;
        result200 = Types.initPagedListDtoCuratorDto(resultData200);
        return Promise.resolve<Types.PagedListDtoCuratorDto>(result200);

    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<Types.PagedListDtoCuratorDto>(null as any);
}
let _requestConfigUpdateCuratorRole: Partial<AxiosRequestConfig> | null;
export function getUpdateCuratorRoleRequestConfig() {
    return _requestConfigUpdateCuratorRole;
}
export function setUpdateCuratorRoleRequestConfig(value: Partial<AxiosRequestConfig>) {
    _requestConfigUpdateCuratorRole = value;
}
export function patchUpdateCuratorRoleRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
    _requestConfigUpdateCuratorRole = patch(_requestConfigUpdateCuratorRole ?? {});
}

let _requestConfigCreateCurator: Partial<AxiosRequestConfig> | null;
export function getCreateCuratorRequestConfig() {
    return _requestConfigCreateCurator;
}
export function setCreateCuratorRequestConfig(value: Partial<AxiosRequestConfig>) {
    _requestConfigCreateCurator = value;
}
export function patchCreateCuratorRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
    _requestConfigCreateCurator = patch(_requestConfigCreateCurator ?? {});
}

let _requestConfigGetAllCurators: Partial<AxiosRequestConfig> | null;
export function getGetAllCuratorsRequestConfig() {
    return _requestConfigGetAllCurators;
}
export function setGetAllCuratorsRequestConfig(value: Partial<AxiosRequestConfig>) {
    _requestConfigGetAllCurators = value;
}
export function patchGetAllCuratorsRequestConfig(patch: (value: Partial<AxiosRequestConfig>) => Partial<AxiosRequestConfig>) {
    _requestConfigGetAllCurators = patch(_requestConfigGetAllCurators ?? {});
}